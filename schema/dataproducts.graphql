"""
Dataproduct contains metadata on a datasource.
"""
type Dataproduct @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.Dataproduct"){
    "id is the identifier for the dataproduct"
    id: ID!
    "name of the dataproduct"
    name: String!
    "description of the dataproduct"
    description: String
    "created is the timestamp for when the dataproduct was created"
    created: Time!
    "lastModified is the timestamp for when the dataproduct was last modified"
    lastModified: Time!
    "repo is the url of the repository containing the code to create the dataproduct"
    repo: String
    "pii indicates whether it is personal identifiable information in the dataproduct"
    pii: Boolean!
    "keywords for the dataproduct used as tags."
    keywords: [String!]!
    "owner of the dataproduct. Changes to the dataproduct can only be done by a member of the owner."
    owner: Owner!
    "datasource contains metadata on the datasource"
    datasource: Datasource!
    "requesters contains list of users, groups and service accounts which can request access to the dataproduct"
    requesters: [String!]! @authenticated
    "access contains list of users, groups and service accounts which have access to the dataproduct"
    access: [Access!]! @authenticated
    "services contains links to this dataproduct in other services"
    services: DataproductServices!
    "mappings services a dataproduct is exposed to"
    mappings: [MappingService!]!
}

type DataproductServices @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.DataproductServices") {
    "URL to the dataproduct in metabase"
    metabase: String
}

"""
TableColumn contains metadata on a BigQuery table column.
"""
type TableColumn @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.TableColumn") {
    "name of column."
    name: String!
    "description of column."
    description: String!
    "mode of column (NULLABLE, REQUIRED or REPEATED)."
    mode: String!
    "type is the datatype of the column."
    type: String!
}

"""
BigQuery contains metadata on a BigQuery table.
"""
type BigQuery @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.BigQuery") {
    "projectID is the GCP project ID that contains the BigQuery table"
    projectID: String!
    "dataset is the dataset that contains the BigQuery table"
    dataset: String!
    "table name for BigQuery table"
    table: String!
    "schema for the BigQuery table"
    schema: [TableColumn!]!
    "lastModified is the time when the table was last modified"
    lastModified: Time!
    "created is when the table was created"
    created: Time!
    "expires, if set, is when the table expires"
    expires: Time
    "tableType is what type the table is"
    tableType: BigQueryType!
    "description is the description of the BigQuery table"
    description: String!
}

"""
Datasource defines types that can be returned as a dataproduct datasource.
"""
union Datasource @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.Datasource") = BigQuery

"""
Access contains metadata on an access entry.
"""
type Access @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.Access") {
    "id for the access entry"
    id: ID!
    "subject to grant access"
    subject: String!
    "name of the granter"
    granter: String!
    "expires is timestamp for when access expires"
    expires: Time
    "created is timestamp for when access was created"
    created: Time!
    "revoked is timestamp for when access was revoked"
    revoked: Time
    "pollyID is the id for the process purpose"
    pollyID: String
}

"""
GroupStats contains statistics on a group.
"""
type GroupStats @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.GroupStats") {
    "email of the group"
	email: String!
    "number of dataproducts owned by the group"
	dataproducts: Int!
}

extend type Query {
    """
    dataproduct returns the given dataproduct.
    """
    dataproduct(
        "id of the requested dataproduct."
        id: ID!
    ): Dataproduct!

    """
    dataproducts returns a list of dataproducts. Pagination done using the arguments.
    """
    dataproducts(
        "limit the number of returned dataproducts."
        limit: Int
        "offset the list of returned dataproducts. Used as pagination with PAGE-INDEX * limit."
        offset: Int
        "service is the third party service."
        service: MappingService
    ): [Dataproduct!]!

    """
    groupStats returns statistics for groups that have created dataproducts.
    """
	groupStats(
        "limit the number of returned groups."
        limit: Int
        "offset the list of returned groups. Used as pagination with PAGE-INDEX * limit."
        offset: Int
    ): [GroupStats!]!
}

"""
NewBigQuery contains metadata for creating a new bigquery data source
"""
input NewBigQuery @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.NewBigQuery") {
    "projectID is the GCP project ID that contains the dataset."
	projectID: String!
	"dataset is the name of the dataset."
    dataset: String!
    "table is the name of the table"
    table: String!
}

"""
NewDataproduct contains metadata for creating a new dataproduct
"""
input NewDataproduct @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.NewDataproduct") {
    "name of dataproduct"
    name: String!
    "description of the dataproduct"
    description: String
    "repo is the url of the repository containing the code to create the dataproduct"
    repo: String
    "pii indicates whether it is personal identifiable information in the dataproduct"
    pii: Boolean!
    "keywords for the dataproduct used as tags."
    keywords: [String!]
    "owner group email for the dataproduct."
    group: String!
    "owner Teamkatalogen URL for the dataproduct."
    teamkatalogenURL: String
    "bigquery contains metadata for the bigquery datasource added to the dataproduct."
    bigquery: NewBigQuery!
    "requesters contains list of users, groups and service accounts which can request access to the dataproduct"
    requesters: [String!]
}

"""
UpdateDataproduct contains metadata for updating a dataproduct
"""
input UpdateDataproduct @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.UpdateDataproduct") {
    "name of dataproduct"
    name: String!
    "description of the dataproduct"
    description: String
    "repo is the url of the repository containing the code to create the dataproduct"
    repo: String
    "pii indicates whether it is personal identifiable information in the dataproduct"
    pii: Boolean!
    "owner Teamkatalogen URL for the dataproduct."
    teamkatalogenURL: String
    "keywords for the dataproduct used as tags."
    keywords: [String!]
    "requesters contains list of users, groups and service accounts which can request access to the dataproduct"
    requesters: [String!]
}

"""
SubjectType defines all possible types that can request access to a dataproduct.
"""
enum SubjectType @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.SubjectType"){
    user
    group
    serviceAccount
}

"""
MappingService defines all possible service types that a dataproduct can be exposed to.
"""
enum MappingService @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.MappingService"){
    metabase
}

extend type Mutation {
    """
    createDataproduct creates a new dataproduct

    Requires authentication.
    """
    createDataproduct(
        "input contains information about the new dataproduct."
        input: NewDataproduct!
    ): Dataproduct! @authenticated

    """
    updateDataproduct updates an existing dataproduct

    Requires authentication.
    """
    updateDataproduct(
        "id of requested dataproduct."
        id: ID!
        "input contains information about the updated dataproduct."
        input: UpdateDataproduct!
    ): Dataproduct! @authenticated


    """
    deleteDataproduct deletes a dataproduct.

    Requires authentication.
    """
    deleteDataproduct(
        "id of dataproduct."
        id: ID!
    ) : Boolean! @authenticated

    """
    addRequesterToDataproduct adds a requester to the dataproduct.

    Requires authentication.
    """
    addRequesterToDataproduct(
        "id of dataproduct."
        dataproductID: ID!
        "subject allowed to request access (user, group or service account)."
        subject: String!
    ): Boolean! @authenticated

    """
    removeRequesterFromDataproduct removes a requester from the dataproduct.

    Requires authentication.
    """
    removeRequesterFromDataproduct(
        "id of dataproduct."
        dataproductID: ID!
        "subject allowed request access (user, group or service account)."
        subject: String!
    ): Boolean! @authenticated

    """
    grantAccessToDataproduct grants access for a subject to the dataproduct.

    Requires authentication.
    """
    grantAccessToDataproduct(
        "id of dataproduct."
        dataproductID: ID!
        "expires is a timestamp for when the access expires."
        expires: Time
        "subject to be granted access."
        subject: String
        "subjectType is the type of entity which should be granted access (user, group or service account)."
        subjectType: SubjectType
        "pollyID is the id of the process policy attached to this grant"
        pollyID: String
    ): Access! @authenticated

    """
    revokeAccessToDataproduct revokes access for a subject to the dataproduct.

    Requires authentication.
    """
    revokeAccessToDataproduct(
        "id for the access entry."
        id: ID!
    ): Boolean! @authenticated

    """
    mapDataproduct exposes a dataproduct to third party services, e.g. metabase

    Requires authentication
    """
    mapDataproduct(
        "id of dataproduct."
        dataproductID: ID!
        "service is the type of third party service for which the dataproduct should be exposed."
        services: [MappingService!]!
    ): Boolean! @authenticated
}
