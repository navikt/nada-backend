"""
NewJoinableViews contains metadata for creating joinable views
"""
input NewJoinableViews @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.NewJoinableViews"){
    "name is the name of the joinable views which will be used as the name of the dataset in bigquery, which contains all the joinable views"
    name: String!
    "expires is the time when the created joinable dataset should be deleted, default never"
    expires: Time
    "mapToFkNada is whether we should map fnr to fk-nada"
    mapToFkNada: Boolean!
    "fnrColumns is the columns which contains fnr"
    fnrColumns: [String!]!
    "datasetIDs is the IDs of the dataset which are made joinable."
    datasetIDs: [ID!]!
}

type JoinableView @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.JoinableView"){
    "id is the id of the joinable view set"
    id: ID!
    name: String!
    created: Time!
    expires: Time
}

type JoinableViewDatasource@goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.JoinableViewDatasource"){
    bigqueryUrl: String!
    accessible: Boolean!
    deleted: Boolean!
}

type JoinableViewWithDatasource @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.JoinableViewWithDatasource"){
    "id is the id of the joinable view set"
    id: ID!
    name: String!
    created: Time!
    expires: Time
    pseudoDatasources: [JoinableViewDatasource!]!
}

extend type Mutation {
    """
    createJoinableView creates a new joinable view set

    Requires authentication.
    """
    createJoinableViews(
        "input contains information about the joinable view set"
        input: NewJoinableViews!
    ): String! @authenticated
}

extend type Query {
    """
    joinableViews returns all the joinableViews for the user.
    """
    joinableViews: [JoinableView!]!

    """
    joinableView returns detailed information about a joinableView.
    """
    joinableView(id: ID!): JoinableViewWithDatasource!
}
