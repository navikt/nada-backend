"""
Story contains the metadata and content of data stories.
"""
type Story @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.Story"){
	"id of the data story."
	id: ID!
	"name of the data story."
	name: String!
	"creator of the data story."
	creator: String!
	"description of the data story."
	description: String!
	"keywords for the story used as tags."
	keywords: [String!]!
    "teamkatalogenURL of the creator"
    teamkatalogenURL: String
    "Id of the creator's product area."
    productAreaID: String
    "Id of the creator's team."
    teamID: String
    "created is the timestamp for when the data story was created"
    created: Time!
    "lastModified is the timestamp for when the data story was last modified"
    lastModified: Time
    "group is the owner group of the data story"
    group: String!
}

"The Upload scalar type represents a multipart file upload."
scalar Upload

"""
UploadFile contains path and data of a file
"""
input UploadFile @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.UploadFile"){
	"path of the file uploaded"
	path: String!
	"file data"
	file: Upload!
}

"""
NewStory contains the metadata and content of data stories.
"""
input NewStory @goModel(model: "github.com/navikt/nada-backend/pkg/graph/models.NewStory"){
    "id of the data story."
    id: ID
	"name of the data story."
	name: String!
	"description of the data story."
	description: String
	"keywords for the story used as tags."
	keywords: [String!]!
    "teamkatalogenURL of the creator."
    teamkatalogenURL: String
    "Id of the creator's product area."
    productAreaID: String
    "Id of the creator's team."
    teamID: String
    "group is the owner group of the data story."
    group: String!
}

extend type Mutation {
	"""
    createStory creates a data story.

    Requires authentication.
    """
	createStory(
		"file is the data for story"
		files : [UploadFile!]!
		"input contains metadata about the new data story."
		input: NewStory!
	): Story! @authenticated

 	"""
    updateStoryMetadata updates metadata on an existing data story.

    Requires authentication.
    """
	updateStoryMetadata(
		"id is the id for the data story you want to update."
		id: ID!
		"name of the data story"
		name: String!
	  	"description of the data story."
    	description: String!
    	"keywords for the data story used as tags."
   		keywords: [String!]!
		"owner Teamkatalogen URL for the dataproduct."
		teamkatalogenURL: String
	    "Id of the team's product area."
    	productAreaID: String
        "Id of the team."
    	teamID: String
        "group is the owner group of the data story"
        group: String!
	): Story! @authenticated

	"""
    deleteStory deletes an existing data story.

    Requires authentication.
    """
	deleteStory(
		"id is the id for the data story."
		id: ID!
	): Boolean! @authenticated

}

extend type Query {
	"""
    dataStory returns the given story.
    """
	dataStory(
		"id of the data story."
		id: ID!
	): Story!
}
