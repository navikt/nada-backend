// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: third_party_mappings.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getDatasetMappings = `-- name: GetDatasetMappings :one
SELECT services, dataset_id
FROM third_party_mappings
WHERE "dataset_id" = $1
`

func (q *Queries) GetDatasetMappings(ctx context.Context, datasetID uuid.UUID) (ThirdPartyMapping, error) {
	row := q.db.QueryRowContext(ctx, getDatasetMappings, datasetID)
	var i ThirdPartyMapping
	err := row.Scan(pq.Array(&i.Services), &i.DatasetID)
	return i, err
}

const getDatasetsByMapping = `-- name: GetDatasetsByMapping :many
SELECT datasets.id, datasets.name, datasets.description, datasets.pii, datasets.created, datasets.last_modified, datasets.type, datasets.tsv_document, datasets.slug, datasets.repo, datasets.keywords, datasets.dataproduct_id, datasets.anonymisation_description, datasets.target_user FROM third_party_mappings
INNER JOIN datasets ON datasets.id = third_party_mappings.dataset_id
WHERE $1::TEXT = ANY("services")
LIMIT $3 OFFSET $2
`

type GetDatasetsByMappingParams struct {
	Service string
	Offs    int32
	Lim     int32
}

func (q *Queries) GetDatasetsByMapping(ctx context.Context, arg GetDatasetsByMappingParams) ([]Dataset, error) {
	rows, err := q.db.QueryContext(ctx, getDatasetsByMapping, arg.Service, arg.Offs, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dataset{}
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Pii,
			&i.Created,
			&i.LastModified,
			&i.Type,
			&i.TsvDocument,
			&i.Slug,
			&i.Repo,
			pq.Array(&i.Keywords),
			&i.DataproductID,
			&i.AnonymisationDescription,
			&i.TargetUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const mapDataset = `-- name: MapDataset :exec
INSERT INTO third_party_mappings (
    "dataset_id",
    "services"
) VALUES (
    $1,
    $2
) ON CONFLICT ("dataset_id") DO UPDATE SET
    "services" = EXCLUDED.services
`

type MapDatasetParams struct {
	DatasetID uuid.UUID
	Services  []string
}

func (q *Queries) MapDataset(ctx context.Context, arg MapDatasetParams) error {
	_, err := q.db.ExecContext(ctx, mapDataset, arg.DatasetID, pq.Array(arg.Services))
	return err
}
