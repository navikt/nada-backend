// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: dataset_access.sql

package gensql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getAccessToDataset = `-- name: GetAccessToDataset :one
SELECT id, dataset_id, subject, granter, expires, created, revoked, access_request_id
FROM dataset_access
WHERE id = $1
`

func (q *Queries) GetAccessToDataset(ctx context.Context, id uuid.UUID) (DatasetAccess, error) {
	row := q.db.QueryRowContext(ctx, getAccessToDataset, id)
	var i DatasetAccess
	err := row.Scan(
		&i.ID,
		&i.DatasetID,
		&i.Subject,
		&i.Granter,
		&i.Expires,
		&i.Created,
		&i.Revoked,
		&i.AccessRequestID,
	)
	return i, err
}

const getActiveAccessToDatasetForSubject = `-- name: GetActiveAccessToDatasetForSubject :one
SELECT id, dataset_id, subject, granter, expires, created, revoked, access_request_id
FROM dataset_access
WHERE dataset_id = $1 
AND "subject" = $2 
AND revoked IS NULL 
AND (
  expires IS NULL 
  OR expires >= NOW()
)
`

type GetActiveAccessToDatasetForSubjectParams struct {
	DatasetID uuid.UUID
	Subject   string
}

func (q *Queries) GetActiveAccessToDatasetForSubject(ctx context.Context, arg GetActiveAccessToDatasetForSubjectParams) (DatasetAccess, error) {
	row := q.db.QueryRowContext(ctx, getActiveAccessToDatasetForSubject, arg.DatasetID, arg.Subject)
	var i DatasetAccess
	err := row.Scan(
		&i.ID,
		&i.DatasetID,
		&i.Subject,
		&i.Granter,
		&i.Expires,
		&i.Created,
		&i.Revoked,
		&i.AccessRequestID,
	)
	return i, err
}

const grantAccessToDataset = `-- name: GrantAccessToDataset :one
INSERT INTO dataset_access (dataset_id,
                            "subject",
                            granter,
                            expires,
                            access_request_id)
VALUES ($1,
        $2,
        LOWER($3),
        $4,
        $5)
RETURNING id, dataset_id, subject, granter, expires, created, revoked, access_request_id
`

type GrantAccessToDatasetParams struct {
	DatasetID       uuid.UUID
	Subject         string
	Granter         string
	Expires         sql.NullTime
	AccessRequestID uuid.NullUUID
}

func (q *Queries) GrantAccessToDataset(ctx context.Context, arg GrantAccessToDatasetParams) (DatasetAccess, error) {
	row := q.db.QueryRowContext(ctx, grantAccessToDataset,
		arg.DatasetID,
		arg.Subject,
		arg.Granter,
		arg.Expires,
		arg.AccessRequestID,
	)
	var i DatasetAccess
	err := row.Scan(
		&i.ID,
		&i.DatasetID,
		&i.Subject,
		&i.Granter,
		&i.Expires,
		&i.Created,
		&i.Revoked,
		&i.AccessRequestID,
	)
	return i, err
}

const listAccessToDataset = `-- name: ListAccessToDataset :many
SELECT id, dataset_id, subject, granter, expires, created, revoked, access_request_id
FROM dataset_access
WHERE dataset_id = $1
`

func (q *Queries) ListAccessToDataset(ctx context.Context, datasetID uuid.UUID) ([]DatasetAccess, error) {
	rows, err := q.db.QueryContext(ctx, listAccessToDataset, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DatasetAccess{}
	for rows.Next() {
		var i DatasetAccess
		if err := rows.Scan(
			&i.ID,
			&i.DatasetID,
			&i.Subject,
			&i.Granter,
			&i.Expires,
			&i.Created,
			&i.Revoked,
			&i.AccessRequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveAccessToDataset = `-- name: ListActiveAccessToDataset :many
SELECT id, dataset_id, subject, granter, expires, created, revoked, access_request_id
FROM dataset_access
WHERE dataset_id = $1 AND revoked IS NULL AND (expires IS NULL OR expires >= NOW())
`

func (q *Queries) ListActiveAccessToDataset(ctx context.Context, datasetID uuid.UUID) ([]DatasetAccess, error) {
	rows, err := q.db.QueryContext(ctx, listActiveAccessToDataset, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DatasetAccess{}
	for rows.Next() {
		var i DatasetAccess
		if err := rows.Scan(
			&i.ID,
			&i.DatasetID,
			&i.Subject,
			&i.Granter,
			&i.Expires,
			&i.Created,
			&i.Revoked,
			&i.AccessRequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnrevokedExpiredAccessEntries = `-- name: ListUnrevokedExpiredAccessEntries :many
SELECT id, dataset_id, subject, granter, expires, created, revoked, access_request_id
FROM dataset_access
WHERE revoked IS NULL
  AND expires < NOW()
`

func (q *Queries) ListUnrevokedExpiredAccessEntries(ctx context.Context) ([]DatasetAccess, error) {
	rows, err := q.db.QueryContext(ctx, listUnrevokedExpiredAccessEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DatasetAccess{}
	for rows.Next() {
		var i DatasetAccess
		if err := rows.Scan(
			&i.ID,
			&i.DatasetID,
			&i.Subject,
			&i.Granter,
			&i.Expires,
			&i.Created,
			&i.Revoked,
			&i.AccessRequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAccessToDataset = `-- name: RevokeAccessToDataset :exec
UPDATE dataset_access
SET revoked = NOW()
WHERE id = $1
`

func (q *Queries) RevokeAccessToDataset(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeAccessToDataset, id)
	return err
}
