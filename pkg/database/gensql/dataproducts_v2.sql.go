// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: dataproducts_v2.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getDataproductWithDatasets = `-- name: GetDataproductWithDatasets :many
SELECT dp_id, dp_name, dp_description, dp_group, dp_created, dp_last_modified, dp_slug, teamkatalogen_url, team_contact, team_id, ds_dp_id, ds_id, ds_name, ds_description, ds_created, ds_last_modified, ds_slug, ds_keywords
FROM dataproduct_view
WHERE dp_id = $1
`

func (q *Queries) GetDataproductWithDatasets(ctx context.Context, id uuid.UUID) ([]DataproductView, error) {
	rows, err := q.db.QueryContext(ctx, getDataproductWithDatasets, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataproductView{}
	for rows.Next() {
		var i DataproductView
		if err := rows.Scan(
			&i.DpID,
			&i.DpName,
			&i.DpDescription,
			&i.DpGroup,
			&i.DpCreated,
			&i.DpLastModified,
			&i.DpSlug,
			&i.TeamkatalogenUrl,
			&i.TeamContact,
			&i.TeamID,
			&i.DsDpID,
			&i.DsID,
			&i.DsName,
			&i.DsDescription,
			&i.DsCreated,
			&i.DsLastModified,
			&i.DsSlug,
			pq.Array(&i.DsKeywords),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
