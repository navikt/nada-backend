// Code generated by sqlc. DO NOT EDIT.
// source: stories.sql

package gensql

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createStory = `-- name: CreateStory :one
INSERT INTO stories (
	"name",
	"group"
) VALUES (
	$1,
	$2
)
RETURNING id, name, created, "group"
`

type CreateStoryParams struct {
	Name string
	Grp  string
}

func (q *Queries) CreateStory(ctx context.Context, arg CreateStoryParams) (Story, error) {
	row := q.db.QueryRowContext(ctx, createStory, arg.Name, arg.Grp)
	var i Story
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Group,
	)
	return i, err
}

const createStoryView = `-- name: CreateStoryView :one
INSERT INTO story_views (
	"story_id",
	"type",
	"spec"
) VALUES (
	$1,
	$2,
	$3
)
RETURNING id, story_id, type, spec
`

type CreateStoryViewParams struct {
	StoryID uuid.UUID
	Type    StoryViewType
	Spec    json.RawMessage
}

func (q *Queries) CreateStoryView(ctx context.Context, arg CreateStoryViewParams) (StoryView, error) {
	row := q.db.QueryRowContext(ctx, createStoryView, arg.StoryID, arg.Type, arg.Spec)
	var i StoryView
	err := row.Scan(
		&i.ID,
		&i.StoryID,
		&i.Type,
		&i.Spec,
	)
	return i, err
}
