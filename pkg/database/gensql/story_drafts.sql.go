// Code generated by sqlc. DO NOT EDIT.
// source: story_drafts.sql

package gensql

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createStoryDraft = `-- name: CreateStoryDraft :one
INSERT INTO story_drafts (
	"name"
) VALUES (
	$1
)
RETURNING id, name, created
`

func (q *Queries) CreateStoryDraft(ctx context.Context, name string) (StoryDraft, error) {
	row := q.db.QueryRowContext(ctx, createStoryDraft, name)
	var i StoryDraft
	err := row.Scan(&i.ID, &i.Name, &i.Created)
	return i, err
}

const createStoryViewDraft = `-- name: CreateStoryViewDraft :one
INSERT INTO story_view_drafts (
	"story_id",
	"sort",
	"type",
	"spec"
) VALUES (
	$1,
	$2,
	$3,
	$4
)
RETURNING id, story_id, sort, type, spec
`

type CreateStoryViewDraftParams struct {
	StoryID uuid.UUID
	Sort    int32
	Type    StoryViewType
	Spec    json.RawMessage
}

func (q *Queries) CreateStoryViewDraft(ctx context.Context, arg CreateStoryViewDraftParams) (StoryViewDraft, error) {
	row := q.db.QueryRowContext(ctx, createStoryViewDraft,
		arg.StoryID,
		arg.Sort,
		arg.Type,
		arg.Spec,
	)
	var i StoryViewDraft
	err := row.Scan(
		&i.ID,
		&i.StoryID,
		&i.Sort,
		&i.Type,
		&i.Spec,
	)
	return i, err
}
