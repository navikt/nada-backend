// Code generated by sqlc. DO NOT EDIT.
// source: quarto.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
)

const createQuarto = `-- name: CreateQuarto :one
INSERT INTO "quarto" ("team",
                      "content")
VALUES (
    $1,
    $2
)
RETURNING id, team, content
`

type CreateQuartoParams struct {
	Team    string
	Content string
}

func (q *Queries) CreateQuarto(ctx context.Context, arg CreateQuartoParams) (Quarto, error) {
	row := q.db.QueryRowContext(ctx, createQuarto, arg.Team, arg.Content)
	var i Quarto
	err := row.Scan(&i.ID, &i.Team, &i.Content)
	return i, err
}

const deleteQuarto = `-- name: DeleteQuarto :exec
DELETE FROM "quarto"
WHERE id = $1
`

func (q *Queries) DeleteQuarto(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteQuarto, id)
	return err
}

const getQuarto = `-- name: GetQuarto :one
SELECT id, team, content
FROM "quarto"
WHERE id = $1
`

func (q *Queries) GetQuarto(ctx context.Context, id uuid.UUID) (Quarto, error) {
	row := q.db.QueryRowContext(ctx, getQuarto, id)
	var i Quarto
	err := row.Scan(&i.ID, &i.Team, &i.Content)
	return i, err
}

const getQuartos = `-- name: GetQuartos :many
SELECT id, team, content
FROM "quarto"
`

func (q *Queries) GetQuartos(ctx context.Context) ([]Quarto, error) {
	rows, err := q.db.QueryContext(ctx, getQuartos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quarto{}
	for rows.Next() {
		var i Quarto
		if err := rows.Scan(&i.ID, &i.Team, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuartosForTeam = `-- name: GetQuartosForTeam :many
SELECT id, team, content
FROM "quarto"
WHERE team = $1
`

func (q *Queries) GetQuartosForTeam(ctx context.Context, team string) ([]Quarto, error) {
	rows, err := q.db.QueryContext(ctx, getQuartosForTeam, team)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quarto{}
	for rows.Next() {
		var i Quarto
		if err := rows.Scan(&i.ID, &i.Team, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuarto = `-- name: UpdateQuarto :one
UPDATE "quarto"
SET content = $1
WHERE id = $2
RETURNING id, team, content
`

type UpdateQuartoParams struct {
	Content string
	ID      uuid.UUID
}

func (q *Queries) UpdateQuarto(ctx context.Context, arg UpdateQuartoParams) (Quarto, error) {
	row := q.db.QueryRowContext(ctx, updateQuarto, arg.Content, arg.ID)
	var i Quarto
	err := row.Scan(&i.ID, &i.Team, &i.Content)
	return i, err
}
