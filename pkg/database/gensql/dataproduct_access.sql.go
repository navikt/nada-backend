// Code generated by sqlc. DO NOT EDIT.
// source: dataproduct_access.sql

package gensql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getAccessToDataproduct = `-- name: GetAccessToDataproduct :one
SELECT id, dataproduct_id, subject, granter, expires, created, revoked
FROM dataproduct_access
WHERE id = $1
`

func (q *Queries) GetAccessToDataproduct(ctx context.Context, id uuid.UUID) (DataproductAccess, error) {
	row := q.db.QueryRowContext(ctx, getAccessToDataproduct, id)
	var i DataproductAccess
	err := row.Scan(
		&i.ID,
		&i.DataproductID,
		&i.Subject,
		&i.Granter,
		&i.Expires,
		&i.Created,
		&i.Revoked,
	)
	return i, err
}

const grantAccessToDataproduct = `-- name: GrantAccessToDataproduct :one
INSERT INTO dataproduct_access (dataproduct_id,
                                "subject",
                                granter,
                                expires)
VALUES ($1,
        LOWER($2),
        LOWER($3),
        $4)
RETURNING id, dataproduct_id, subject, granter, expires, created, revoked
`

type GrantAccessToDataproductParams struct {
	DataproductID uuid.UUID
	Subject       string
	Granter       string
	Expires       sql.NullTime
}

func (q *Queries) GrantAccessToDataproduct(ctx context.Context, arg GrantAccessToDataproductParams) (DataproductAccess, error) {
	row := q.db.QueryRowContext(ctx, grantAccessToDataproduct,
		arg.DataproductID,
		arg.Subject,
		arg.Granter,
		arg.Expires,
	)
	var i DataproductAccess
	err := row.Scan(
		&i.ID,
		&i.DataproductID,
		&i.Subject,
		&i.Granter,
		&i.Expires,
		&i.Created,
		&i.Revoked,
	)
	return i, err
}

const listAccessToDataproduct = `-- name: ListAccessToDataproduct :many
SELECT id, dataproduct_id, subject, granter, expires, created, revoked
FROM dataproduct_access
WHERE dataproduct_id = $1
`

func (q *Queries) ListAccessToDataproduct(ctx context.Context, dataproductID uuid.UUID) ([]DataproductAccess, error) {
	rows, err := q.db.QueryContext(ctx, listAccessToDataproduct, dataproductID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataproductAccess{}
	for rows.Next() {
		var i DataproductAccess
		if err := rows.Scan(
			&i.ID,
			&i.DataproductID,
			&i.Subject,
			&i.Granter,
			&i.Expires,
			&i.Created,
			&i.Revoked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnrevokedExpiredAccessEntries = `-- name: ListUnrevokedExpiredAccessEntries :many
SELECT id, dataproduct_id, subject, granter, expires, created, revoked
FROM dataproduct_access
WHERE revoked IS NULL
  AND expires < NOW()
`

func (q *Queries) ListUnrevokedExpiredAccessEntries(ctx context.Context) ([]DataproductAccess, error) {
	rows, err := q.db.QueryContext(ctx, listUnrevokedExpiredAccessEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataproductAccess{}
	for rows.Next() {
		var i DataproductAccess
		if err := rows.Scan(
			&i.ID,
			&i.DataproductID,
			&i.Subject,
			&i.Granter,
			&i.Expires,
			&i.Created,
			&i.Revoked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAccessToDataproduct = `-- name: RevokeAccessToDataproduct :exec
UPDATE dataproduct_access
SET revoked = NOW()
WHERE id = $1
`

func (q *Queries) RevokeAccessToDataproduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeAccessToDataproduct, id)
	return err
}
