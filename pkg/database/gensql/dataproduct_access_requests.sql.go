// Code generated by sqlc. DO NOT EDIT.
// source: dataproduct_access_requests.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
)

const createAccessRequestForDataproduct = `-- name: CreateAccessRequestForDataproduct :one
INSERT INTO dataproduct_access_request (dataproduct_id,
                                        "subject",
                                        polly_id)
VALUES ($1,
        LOWER($2),
        $3)
RETURNING id, dataproduct_id, subject, polly_id, last_modified, created
`

type CreateAccessRequestForDataproductParams struct {
	DataproductID uuid.UUID
	Subject       string
	PollyID       uuid.NullUUID
}

func (q *Queries) CreateAccessRequestForDataproduct(ctx context.Context, arg CreateAccessRequestForDataproductParams) (DataproductAccessRequest, error) {
	row := q.db.QueryRowContext(ctx, createAccessRequestForDataproduct, arg.DataproductID, arg.Subject, arg.PollyID)
	var i DataproductAccessRequest
	err := row.Scan(
		&i.ID,
		&i.DataproductID,
		&i.Subject,
		&i.PollyID,
		&i.LastModified,
		&i.Created,
	)
	return i, err
}

const getAccessRequest = `-- name: GetAccessRequest :one
SELECT id, dataproduct_id, subject, polly_id, last_modified, created
FROM dataproduct_access_request
WHERE id = $1
`

func (q *Queries) GetAccessRequest(ctx context.Context, id uuid.UUID) (DataproductAccessRequest, error) {
	row := q.db.QueryRowContext(ctx, getAccessRequest, id)
	var i DataproductAccessRequest
	err := row.Scan(
		&i.ID,
		&i.DataproductID,
		&i.Subject,
		&i.PollyID,
		&i.LastModified,
		&i.Created,
	)
	return i, err
}

const listAccessRequestsForDataproduct = `-- name: ListAccessRequestsForDataproduct :many
SELECT id, dataproduct_id, subject, polly_id, last_modified, created
FROM dataproduct_access_request
WHERE dataproduct_id = $1
`

func (q *Queries) ListAccessRequestsForDataproduct(ctx context.Context, dataproductID uuid.UUID) ([]DataproductAccessRequest, error) {
	rows, err := q.db.QueryContext(ctx, listAccessRequestsForDataproduct, dataproductID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataproductAccessRequest{}
	for rows.Next() {
		var i DataproductAccessRequest
		if err := rows.Scan(
			&i.ID,
			&i.DataproductID,
			&i.Subject,
			&i.PollyID,
			&i.LastModified,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccessRequestsForUser = `-- name: ListAccessRequestsForUser :many
SELECT id, dataproduct_id, subject, polly_id, last_modified, created
FROM dataproduct_access_request
WHERE subject = $1
`

func (q *Queries) ListAccessRequestsForUser(ctx context.Context, subject string) ([]DataproductAccessRequest, error) {
	rows, err := q.db.QueryContext(ctx, listAccessRequestsForUser, subject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DataproductAccessRequest{}
	for rows.Next() {
		var i DataproductAccessRequest
		if err := rows.Scan(
			&i.ID,
			&i.DataproductID,
			&i.Subject,
			&i.PollyID,
			&i.LastModified,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
