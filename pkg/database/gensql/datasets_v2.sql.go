// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: datasets_v2.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getDatasetComplete = `-- name: GetDatasetComplete :many
SELECT
  ds_id, ds_name, ds_description, ds_created, ds_last_modified, ds_slug, pii, ds_keywords, bq_id, bq_created, bq_last_modified, bq_expires, bq_description, bq_missing_since, pii_tags, bq_project, bq_dataset, bq_table_name, bq_table_type, pseudo_columns, bq_schema, ds_dp_id, mapping_services, access_id, access_subject, access_granter, access_expires, access_created, access_revoked, access_request_id, mb_database_id
FROM
  dataset_view
WHERE
  ds_id = $1
`

func (q *Queries) GetDatasetComplete(ctx context.Context, id uuid.UUID) ([]DatasetView, error) {
	rows, err := q.db.QueryContext(ctx, getDatasetComplete, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DatasetView{}
	for rows.Next() {
		var i DatasetView
		if err := rows.Scan(
			&i.DsID,
			&i.DsName,
			&i.DsDescription,
			&i.DsCreated,
			&i.DsLastModified,
			&i.DsSlug,
			&i.Pii,
			pq.Array(&i.DsKeywords),
			&i.BqID,
			&i.BqCreated,
			&i.BqLastModified,
			&i.BqExpires,
			&i.BqDescription,
			&i.BqMissingSince,
			&i.PiiTags,
			&i.BqProject,
			&i.BqDataset,
			&i.BqTableName,
			&i.BqTableType,
			pq.Array(&i.PseudoColumns),
			&i.BqSchema,
			&i.DsDpID,
			pq.Array(&i.MappingServices),
			&i.AccessID,
			&i.AccessSubject,
			&i.AccessGranter,
			&i.AccessExpires,
			&i.AccessCreated,
			&i.AccessRevoked,
			&i.AccessRequestID,
			&i.MbDatabaseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
