// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: metabase_metadata.sql

package gensql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMetabaseMetadata = `-- name: CreateMetabaseMetadata :exec
INSERT INTO metabase_metadata (
    "dataproduct_id",
    "database_id",
    "permission_group_id",
    "collection_id",
    "sa_email",
    "deleted_at"
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type CreateMetabaseMetadataParams struct {
	DataproductID     uuid.UUID
	DatabaseID        int32
	PermissionGroupID sql.NullInt32
	CollectionID      sql.NullInt32
	SaEmail           string
	DeletedAt         sql.NullTime
}

func (q *Queries) CreateMetabaseMetadata(ctx context.Context, arg CreateMetabaseMetadataParams) error {
	_, err := q.db.ExecContext(ctx, createMetabaseMetadata,
		arg.DataproductID,
		arg.DatabaseID,
		arg.PermissionGroupID,
		arg.CollectionID,
		arg.SaEmail,
		arg.DeletedAt,
	)
	return err
}

const deleteMetabaseMetadata = `-- name: DeleteMetabaseMetadata :exec
DELETE 
FROM metabase_metadata
WHERE "dataproduct_id" = $1
`

func (q *Queries) DeleteMetabaseMetadata(ctx context.Context, dataproductID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMetabaseMetadata, dataproductID)
	return err
}

const getMetabaseMetadata = `-- name: GetMetabaseMetadata :one
SELECT dataproduct_id, database_id, permission_group_id, sa_email, collection_id, deleted_at
FROM metabase_metadata
WHERE "dataproduct_id" = $1 AND "deleted_at" IS NULL
`

func (q *Queries) GetMetabaseMetadata(ctx context.Context, dataproductID uuid.UUID) (MetabaseMetadatum, error) {
	row := q.db.QueryRowContext(ctx, getMetabaseMetadata, dataproductID)
	var i MetabaseMetadatum
	err := row.Scan(
		&i.DataproductID,
		&i.DatabaseID,
		&i.PermissionGroupID,
		&i.SaEmail,
		&i.CollectionID,
		&i.DeletedAt,
	)
	return i, err
}

const getMetabaseMetadataWithDeleted = `-- name: GetMetabaseMetadataWithDeleted :one
SELECT dataproduct_id, database_id, permission_group_id, sa_email, collection_id, deleted_at
FROM metabase_metadata
WHERE "dataproduct_id" = $1
`

func (q *Queries) GetMetabaseMetadataWithDeleted(ctx context.Context, dataproductID uuid.UUID) (MetabaseMetadatum, error) {
	row := q.db.QueryRowContext(ctx, getMetabaseMetadataWithDeleted, dataproductID)
	var i MetabaseMetadatum
	err := row.Scan(
		&i.DataproductID,
		&i.DatabaseID,
		&i.PermissionGroupID,
		&i.SaEmail,
		&i.CollectionID,
		&i.DeletedAt,
	)
	return i, err
}

const restoreMetabaseMetadata = `-- name: RestoreMetabaseMetadata :exec
UPDATE metabase_metadata
SET "deleted_at" = null
WHERE dataproduct_id = $1
`

func (q *Queries) RestoreMetabaseMetadata(ctx context.Context, dataproductID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, restoreMetabaseMetadata, dataproductID)
	return err
}

const setPermissionGroupMetabaseMetadata = `-- name: SetPermissionGroupMetabaseMetadata :exec
UPDATE metabase_metadata
SET "permission_group_id" = $1
WHERE dataproduct_id = $2
`

type SetPermissionGroupMetabaseMetadataParams struct {
	ID            sql.NullInt32
	DataproductID uuid.UUID
}

func (q *Queries) SetPermissionGroupMetabaseMetadata(ctx context.Context, arg SetPermissionGroupMetabaseMetadataParams) error {
	_, err := q.db.ExecContext(ctx, setPermissionGroupMetabaseMetadata, arg.ID, arg.DataproductID)
	return err
}

const softDeleteMetabaseMetadata = `-- name: SoftDeleteMetabaseMetadata :exec
UPDATE metabase_metadata
SET "deleted_at" = NOW()
WHERE dataproduct_id = $1
`

func (q *Queries) SoftDeleteMetabaseMetadata(ctx context.Context, dataproductID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteMetabaseMetadata, dataproductID)
	return err
}
