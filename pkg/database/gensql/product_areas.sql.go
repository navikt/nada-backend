// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: product_areas.sql

package gensql

import (
	"context"

	"github.com/google/uuid"
)

const getAllProductAreas = `-- name: GetAllProductAreas :many
SELECT id, external_id, name FROM "product_areas"
`

func (q *Queries) GetAllProductAreas(ctx context.Context) ([]ProductArea, error) {
	rows, err := q.db.QueryContext(ctx, getAllProductAreas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductArea{}
	for rows.Next() {
		var i ProductArea
		if err := rows.Scan(&i.ID, &i.ExternalID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductArea = `-- name: GetProductArea :one
SELECT id, external_id, name FROM "product_areas"
WHERE id = $1
`

func (q *Queries) GetProductArea(ctx context.Context, id uuid.UUID) (ProductArea, error) {
	row := q.db.QueryRowContext(ctx, getProductArea, id)
	var i ProductArea
	err := row.Scan(&i.ID, &i.ExternalID, &i.Name)
	return i, err
}

const getProductAreaForExternalID = `-- name: GetProductAreaForExternalID :one
SELECT id, external_id, name FROM "product_areas"
WHERE external_id = $1
`

func (q *Queries) GetProductAreaForExternalID(ctx context.Context, externalID string) (ProductArea, error) {
	row := q.db.QueryRowContext(ctx, getProductAreaForExternalID, externalID)
	var i ProductArea
	err := row.Scan(&i.ID, &i.ExternalID, &i.Name)
	return i, err
}

const upsertProductArea = `-- name: UpsertProductArea :one
INSERT INTO "product_areas" (
    "external_id",
    "name"
) VALUES (
    $1,
    $2
) ON CONFLICT (external_id)
DO 
UPDATE SET "name" = EXCLUDED.name
RETURNING id, external_id, name
`

type UpsertProductAreaParams struct {
	ExternalID string
	Name       string
}

func (q *Queries) UpsertProductArea(ctx context.Context, arg UpsertProductAreaParams) (ProductArea, error) {
	row := q.db.QueryRowContext(ctx, upsertProductArea, arg.ExternalID, arg.Name)
	var i ProductArea
	err := row.Scan(&i.ID, &i.ExternalID, &i.Name)
	return i, err
}
