// Code generated by sqlc. DO NOT EDIT.
// source: collections.sql

package gensql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections (
	"name",
	"description",
	"slug",
	"repo",
	"group",
	"keywords"
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6
) RETURNING id, name, description, slug, repo, created, last_modified, "group", keywords, tsv_document
`

type CreateCollectionParams struct {
	Name        string
	Description sql.NullString
	Slug        string
	Repo        sql.NullString
	OwnerGroup  string
	Keywords    []string
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, createCollection,
		arg.Name,
		arg.Description,
		arg.Slug,
		arg.Repo,
		arg.OwnerGroup,
		pq.Array(arg.Keywords),
	)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Slug,
		&i.Repo,
		&i.Created,
		&i.LastModified,
		&i.Group,
		pq.Array(&i.Keywords),
		&i.TsvDocument,
	)
	return i, err
}

const createCollectionElement = `-- name: CreateCollectionElement :exec
INSERT INTO collection_elements (
	"element_id",
	"collection_id",
	"element_type"
) VALUES (
	$1,
	$2,
	$3
)
`

type CreateCollectionElementParams struct {
	ElementID    string
	CollectionID string
	ElementType  string
}

func (q *Queries) CreateCollectionElement(ctx context.Context, arg CreateCollectionElementParams) error {
	_, err := q.db.ExecContext(ctx, createCollectionElement, arg.ElementID, arg.CollectionID, arg.ElementType)
	return err
}

const deleteCollection = `-- name: DeleteCollection :exec
DELETE FROM collections WHERE id = $1
`

func (q *Queries) DeleteCollection(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCollection, id)
	return err
}

const deleteCollectionElement = `-- name: DeleteCollectionElement :exec
DELETE FROM collection_elements WHERE element_id = $1 AND collection_id = $2 AND element_type = $3
`

type DeleteCollectionElementParams struct {
	ElementID    string
	CollectionID string
	ElementType  string
}

func (q *Queries) DeleteCollectionElement(ctx context.Context, arg DeleteCollectionElementParams) error {
	_, err := q.db.ExecContext(ctx, deleteCollectionElement, arg.ElementID, arg.CollectionID, arg.ElementType)
	return err
}

const getCollection = `-- name: GetCollection :one
SELECT id, name, description, slug, repo, created, last_modified, "group", keywords, tsv_document FROM collections WHERE id = $1
`

func (q *Queries) GetCollection(ctx context.Context, id uuid.UUID) (Collection, error) {
	row := q.db.QueryRowContext(ctx, getCollection, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Slug,
		&i.Repo,
		&i.Created,
		&i.LastModified,
		&i.Group,
		pq.Array(&i.Keywords),
		&i.TsvDocument,
	)
	return i, err
}

const getCollectionElements = `-- name: GetCollectionElements :many
SELECT element_id, collection_id, element_type FROM collection_elements WHERE collection_id = $1
`

func (q *Queries) GetCollectionElements(ctx context.Context, collectionID string) ([]CollectionElement, error) {
	rows, err := q.db.QueryContext(ctx, getCollectionElements, collectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CollectionElement{}
	for rows.Next() {
		var i CollectionElement
		if err := rows.Scan(&i.ElementID, &i.CollectionID, &i.ElementType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollections = `-- name: GetCollections :many
SELECT id, name, description, slug, repo, created, last_modified, "group", keywords, tsv_document FROM collections ORDER BY last_modified DESC LIMIT $2 OFFSET $1
`

type GetCollectionsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetCollections(ctx context.Context, arg GetCollectionsParams) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, getCollections, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Slug,
			&i.Repo,
			&i.Created,
			&i.LastModified,
			&i.Group,
			pq.Array(&i.Keywords),
			&i.TsvDocument,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollection = `-- name: UpdateCollection :one
UPDATE collections SET
	"name" = $1,
	"description" = $2,
	"slug" = $3,
	"repo" = $4,
	"keywords" = $5
WHERE id = $6
RETURNING id, name, description, slug, repo, created, last_modified, "group", keywords, tsv_document
`

type UpdateCollectionParams struct {
	Name        string
	Description sql.NullString
	Slug        string
	Repo        sql.NullString
	Keywords    []string
	ID          uuid.UUID
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, updateCollection,
		arg.Name,
		arg.Description,
		arg.Slug,
		arg.Repo,
		pq.Array(arg.Keywords),
		arg.ID,
	)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Slug,
		&i.Repo,
		&i.Created,
		&i.LastModified,
		&i.Group,
		pq.Array(&i.Keywords),
		&i.TsvDocument,
	)
	return i, err
}
