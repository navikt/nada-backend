// Code generated by sqlc. DO NOT EDIT.
// source: metadata.sql

package gensql

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const getDatasetMetadata = `-- name: GetDatasetMetadata :one
SELECT dataset_id, created, last_modified, schema FROM dataset_metadata WHERE dataset_id = $1
`

func (q *Queries) GetDatasetMetadata(ctx context.Context, datasetID uuid.UUID) (DatasetMetadatum, error) {
	row := q.db.QueryRowContext(ctx, getDatasetMetadata, datasetID)
	var i DatasetMetadatum
	err := row.Scan(
		&i.DatasetID,
		&i.Created,
		&i.LastModified,
		&i.Schema,
	)
	return i, err
}

const writeDatasetMetadata = `-- name: WriteDatasetMetadata :exec
INSERT INTO dataset_metadata (
	"dataset_id",
	"schema"
) VALUES (
	$1,
	$2
)
ON CONFLICT (dataset_id) DO UPDATE
SET
    "dataset_id" = $1,
    "schema" = $2
`

type WriteDatasetMetadataParams struct {
	DatasetID uuid.UUID
	Schema    json.RawMessage
}

func (q *Queries) WriteDatasetMetadata(ctx context.Context, arg WriteDatasetMetadataParams) error {
	_, err := q.db.ExecContext(ctx, writeDatasetMetadata, arg.DatasetID, arg.Schema)
	return err
}
