// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for DatasetType.
const (
	DatasetTypeBigquery DatasetType = "bigquery"
)

// Defines values for SearchResultType.
const (
	SearchResultTypeDatapackage SearchResultType = "datapackage"

	SearchResultTypeDataproduct SearchResultType = "dataproduct"

	SearchResultTypeDataset SearchResultType = "dataset"
)

// BigQuery defines model for BigQuery.
type BigQuery struct {
	Dataset   string `json:"dataset"`
	ProjectId string `json:"project_id"`
	Table     string `json:"table"`
}

// Dataproduct defines model for Dataproduct.
type Dataproduct struct {
	Created      time.Time        `json:"created"`
	Datasets     []DatasetSummary `json:"datasets"`
	Description  *string          `json:"description,omitempty"`
	Id           string           `json:"id"`
	Keywords     *[]string        `json:"keywords,omitempty"`
	LastModified time.Time        `json:"last_modified"`
	Name         string           `json:"name"`
	Owner        Owner            `json:"owner"`
	Repo         *string          `json:"repo,omitempty"`
	Slug         string           `json:"slug"`
}

// Dataset defines model for Dataset.
type Dataset struct {
	Bigquery      BigQuery `json:"bigquery"`
	DataproductId string   `json:"dataproduct_id"`
	Description   *string  `json:"description,omitempty"`
	Id            string   `json:"id"`
	Name          string   `json:"name"`
	Pii           bool     `json:"pii"`
}

// DatasetSummary defines model for DatasetSummary.
type DatasetSummary struct {
	Id   string      `json:"id"`
	Name string      `json:"name"`
	Type DatasetType `json:"type"`
}

// DatasetType defines model for DatasetType.
type DatasetType string

// NewDataproduct defines model for NewDataproduct.
type NewDataproduct struct {
	Description *string   `json:"description,omitempty"`
	Keywords    *[]string `json:"keywords,omitempty"`
	Name        string    `json:"name"`
	Owner       Owner     `json:"owner"`
	Repo        *string   `json:"repo,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// NewDataset defines model for NewDataset.
type NewDataset struct {
	Bigquery      BigQuery `json:"bigquery"`
	DataproductId string   `json:"dataproduct_id"`
	Description   *string  `json:"description,omitempty"`
	Name          string   `json:"name"`
	Pii           bool     `json:"pii"`
}

// Owner defines model for Owner.
type Owner struct {
	Team          string  `json:"team"`
	Teamkatalogen *string `json:"teamkatalogen,omitempty"`
}

// SearchResultEntry defines model for SearchResultEntry.
type SearchResultEntry struct {
	Excerpt string           `json:"excerpt"`
	Id      string           `json:"id"`
	Name    string           `json:"name"`
	Type    SearchResultType `json:"type"`
	Url     string           `json:"url"`
}

// SearchResultType defines model for SearchResultType.
type SearchResultType string

// CreateDataproductJSONBody defines parameters for CreateDataproduct.
type CreateDataproductJSONBody NewDataproduct

// UpdateDataproductJSONBody defines parameters for UpdateDataproduct.
type UpdateDataproductJSONBody NewDataproduct

// CreateDatasetJSONBody defines parameters for CreateDataset.
type CreateDatasetJSONBody NewDataset

// UpdateDatasetJSONBody defines parameters for UpdateDataset.
type UpdateDatasetJSONBody NewDataset

// SearchParams defines parameters for Search.
type SearchParams struct {
	Q string `json:"q"`
}

// CreateDataproductJSONRequestBody defines body for CreateDataproduct for application/json ContentType.
type CreateDataproductJSONRequestBody CreateDataproductJSONBody

// UpdateDataproductJSONRequestBody defines body for UpdateDataproduct for application/json ContentType.
type UpdateDataproductJSONRequestBody UpdateDataproductJSONBody

// CreateDatasetJSONRequestBody defines body for CreateDataset for application/json ContentType.
type CreateDatasetJSONRequestBody CreateDatasetJSONBody

// UpdateDatasetJSONRequestBody defines body for UpdateDataset for application/json ContentType.
type UpdateDatasetJSONRequestBody UpdateDatasetJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dataproducts)
	GetDataproducts(w http.ResponseWriter, r *http.Request)

	// (POST /dataproducts)
	CreateDataproduct(w http.ResponseWriter, r *http.Request)

	// (DELETE /dataproducts/{id})
	DeleteDataproduct(w http.ResponseWriter, r *http.Request, id string)

	// (GET /dataproducts/{id})
	GetDataproduct(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /dataproducts/{id})
	UpdateDataproduct(w http.ResponseWriter, r *http.Request, id string)

	// (POST /datasets)
	CreateDataset(w http.ResponseWriter, r *http.Request)

	// (DELETE /datasets/{id})
	DeleteDataset(w http.ResponseWriter, r *http.Request, id string)

	// (GET /datasets/{id})
	GetDataset(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /datasets/{id})
	UpdateDataset(w http.ResponseWriter, r *http.Request, id string)

	// (GET /search)
	Search(w http.ResponseWriter, r *http.Request, params SearchParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetDataproducts operation middleware
func (siw *ServerInterfaceWrapper) GetDataproducts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDataproducts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateDataproduct operation middleware
func (siw *ServerInterfaceWrapper) CreateDataproduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDataproduct(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteDataproduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteDataproduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDataproduct(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetDataproduct operation middleware
func (siw *ServerInterfaceWrapper) GetDataproduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDataproduct(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateDataproduct operation middleware
func (siw *ServerInterfaceWrapper) UpdateDataproduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDataproduct(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateDataset operation middleware
func (siw *ServerInterfaceWrapper) CreateDataset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDataset(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteDataset operation middleware
func (siw *ServerInterfaceWrapper) DeleteDataset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDataset(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetDataset operation middleware
func (siw *ServerInterfaceWrapper) GetDataset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDataset(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateDataset operation middleware
func (siw *ServerInterfaceWrapper) UpdateDataset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDataset(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams

	// ------------- Required query parameter "q" -------------
	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		http.Error(w, "Query argument q is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter q: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Search(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dataproducts", wrapper.GetDataproducts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dataproducts", wrapper.CreateDataproduct)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dataproducts/{id}", wrapper.DeleteDataproduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dataproducts/{id}", wrapper.GetDataproduct)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/dataproducts/{id}", wrapper.UpdateDataproduct)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/datasets", wrapper.CreateDataset)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/datasets/{id}", wrapper.DeleteDataset)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/datasets/{id}", wrapper.GetDataset)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/datasets/{id}", wrapper.UpdateDataset)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/search", wrapper.Search)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTY/bNhD9KwLbo2o7aU+6NXURLFp022Z7ChbBWBrbzEoklxzFNRb+7wU/ZFsWJdlp",
	"4vgmk8P5ePPemHxhuayUFCjIsOyFmXyNFbjPN3z1V416a7+Vlgo1cXQ7BRAYJPtJW4UsY4Y0Fyu2S63l",
	"R8zpAy+i2wSLEiM7u5RpfK65xoJl74+9pPtwzenHtDktF9bK+p0DgdKyqHPq5ptrBEKX0FLqCohl1in+",
	"QLxClnazDBHdYU5YuY/vNS5Zxr6bHhCbBrimc3/gXV1VoLeuUO8TtAb3u0CTa66ISxEFpgevJ9xupC7a",
	"mXRRPQlWgqEPlSz4kl9StoAKo/7lRqAew+DeGblGKhl1Y8p6Nd5713OXSjjRxE/3jTyt8KhjfeQIfG0T",
	"Y8FXzw3Fh0rbSyFwIzCtj+Sf2ete+BXnR+sLKUsEMYibPdFJNT3UO4BSw+EOWJdm7RfO0s2DNR2qx/ka",
	"SPohxEJRV/ZspNBDYn/gZnBcjLXv8zR5G+IKePqYMUADOLckl/+pi1ByRwxeI4OSuG9a08aBEKp4zxGq",
	"JyAo5QrFeDOcn1jcdwg6X/+Npi7pV0ExNeK/OWpFX2S+nKPU45S8XFNW63K8SGsUQqQtTTcVjAFwqu3D",
	"deCopc0vyJ9ghRHZ27S4WHrtcLKXEPbzn3fJg/tO2SfUxhGQvZrMnCwVClCcZezHyWzy2hIGaO2wnx4F",
	"dgsrr5YWkdnv3FACZZm0rJ1jDdbmrmAZe4s0b+9rNEoK49v8ejZzNxgpCIULAkqVPHcOph+Nl4xv0kW3",
	"lQa3zqTanSqS3f/mV5U0kTJ/cf/JCSQCN0m7I+1KveG8ZWGJgobeyGJ7UZlD1Z2M993OM7IF6qsvFu0k",
	"VBpFp0hMnedozLIuy21IqcWi6Qsvdh7cEgm7MM/degKDEHujNsQKNFRIqA3L3ne8HkyTu7kVqF21RG90",
	"mnnNHhRNusb0CJxTnT12wP6pr5oiaag1IKDjgpMNp3Wyv+sNa+kmar8h9dYRiP9RBYyyyhvdALLfZlbM",
	"rjUrPM6NKJoJ0bxDz5y+/p+xb/L63a+IpA1whYkbwlw6bS2Wl03aGJyHKet3R7Vg8Aan61uk3grDIL2F",
	"8mbX4M35MzKG1mE+fiPArq/mq3SlOw+Nexb03rj9qyHhIrFew0Os0y5vdZWLdvcdd8YfdqhCu1OBl21G",
	"Odr4V+ueN8+X0cZ6Nag/NS7dU46tiZTJplNQfOJ3J4SG7G+2e9z9FwAA//8AVoP2LRYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

