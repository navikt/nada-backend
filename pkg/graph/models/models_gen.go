// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type SearchResult interface {
	IsSearchResult()
}

type Group struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type SearchQuery struct {
	// Freetext search
	Text *string `json:"text"`
	// Filter on keyword
	Keyword *string `json:"keyword"`
	Limit   *int    `json:"limit"`
	Offset  *int    `json:"offset"`
}

type CollectionElementType string

const (
	CollectionElementTypeDataproduct CollectionElementType = "dataproduct"
)

var AllCollectionElementType = []CollectionElementType{
	CollectionElementTypeDataproduct,
}

func (e CollectionElementType) IsValid() bool {
	switch e {
	case CollectionElementTypeDataproduct:
		return true
	}
	return false
}

func (e CollectionElementType) String() string {
	return string(e)
}

func (e *CollectionElementType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollectionElementType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollectionElementType", str)
	}
	return nil
}

func (e CollectionElementType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
