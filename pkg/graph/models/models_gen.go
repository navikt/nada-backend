// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

type CollectionElement interface {
	IsCollectionElement()
}

type Datasource interface {
	IsDatasource()
}

type BigQuery struct {
	ProductID string `json:"product_id"`
	Dataset   string `json:"dataset"`
	Table     string `json:"table"`
}

func (BigQuery) IsDatasource() {}

type Collection struct {
	ID       uuid.UUID           `json:"id"`
	Elements []CollectionElement `json:"elements"`
}

type NewDataproduct struct {
	Name        string          `json:"name"`
	Description *string         `json:"description"`
	Slug        string          `json:"slug"`
	Repo        *string         `json:"repo"`
	Pii         bool            `json:"pii"`
	Keywords    []string        `json:"keywords"`
	Group       string          `json:"group"`
	Type        DataproductType `json:"type"`
}

type Owner struct {
	Group         string `json:"Group"`
	Teamkatalogen string `json:"Teamkatalogen"`
}

type DataproductType string

const (
	DataproductTypeBigQuery DataproductType = "BigQuery"
)

var AllDataproductType = []DataproductType{
	DataproductTypeBigQuery,
}

func (e DataproductType) IsValid() bool {
	switch e {
	case DataproductTypeBigQuery:
		return true
	}
	return false
}

func (e DataproductType) String() string {
	return string(e)
}

func (e *DataproductType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataproductType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataproductType", str)
	}
	return nil
}

func (e DataproductType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
