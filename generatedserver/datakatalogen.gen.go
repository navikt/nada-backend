// Package SpecV1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package SpecV1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for DatasetType.
const (
	DatasetTypeBigquery DatasetType = "bigquery"
)

// Defines values for SearchResultEntryType.
const (
	SearchResultEntryTypeDatapackage SearchResultEntryType = "datapackage"

	SearchResultEntryTypeDataproduct SearchResultEntryType = "dataproduct"

	SearchResultEntryTypeDataset SearchResultEntryType = "dataset"
)

// Dataproduct defines model for Dataproduct.
type Dataproduct struct {
	Created  *string `json:"created,omitempty"`
	Datasets *[]struct {
		Id   *string      `json:"id,omitempty"`
		Type *DatasetType `json:"type,omitempty"`
	} `json:"datasets,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Id           *string   `json:"id,omitempty"`
	Keyword      *[]string `json:"keyword,omitempty"`
	LastModified *string   `json:"last_modified,omitempty"`
	Name         string    `json:"name"`
	Owner        struct {
		Team          string  `json:"team"`
		Teamkatalogen *string `json:"teamkatalogen,omitempty"`
	} `json:"owner"`
	Repo *string `json:"repo,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// Dataset defines model for Dataset.
type Dataset struct {
	Bigquery *struct {
		Dataset   string `json:"dataset"`
		ProjectId string `json:"project_id"`
		Table     string `json:"table"`
	} `json:"bigquery,omitempty"`
	DataproductId *string `json:"dataproduct_id,omitempty"`
	Description   *string `json:"description,omitempty"`
	Id            *string `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
	Pii           *bool   `json:"pii,omitempty"`
}

// DatasetType defines model for DatasetType.
type DatasetType string

// NewDataproduct defines model for NewDataproduct.
type NewDataproduct struct {
	Description *string   `json:"description,omitempty"`
	Keyword     *[]string `json:"keyword,omitempty"`
	Name        string    `json:"name"`
	Owner       struct {
		Team string `json:"team"`
	} `json:"owner"`
	Repo *string `json:"repo,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// NewDataset defines model for NewDataset.
type NewDataset struct {
	Bigquery struct {
		Dataset   string `json:"dataset"`
		ProjectId string `json:"project_id"`
		Table     string `json:"table"`
	} `json:"bigquery"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Pii         bool    `json:"pii"`
}

// SearchResultEntry defines model for SearchResultEntry.
type SearchResultEntry struct {
	Excerpt *string                `json:"excerpt,omitempty"`
	Id      *string                `json:"id,omitempty"`
	Name    *string                `json:"name,omitempty"`
	Type    *SearchResultEntryType `json:"type,omitempty"`
	Url     *string                `json:"url,omitempty"`
}

// SearchResultEntryType defines model for SearchResultEntry.Type.
type SearchResultEntryType string

// PostDataproductsJSONBody defines parameters for PostDataproducts.
type PostDataproductsJSONBody NewDataproduct

// PutDataproductsDataproductIdJSONBody defines parameters for PutDataproductsDataproductId.
type PutDataproductsDataproductIdJSONBody NewDataproduct

// PostDataproductsDataproductIdDatasetsJSONBody defines parameters for PostDataproductsDataproductIdDatasets.
type PostDataproductsDataproductIdDatasetsJSONBody NewDataset

// PutDataproductsDataproductIdDatasetsDatasetIdJSONBody defines parameters for PutDataproductsDataproductIdDatasetsDatasetId.
type PutDataproductsDataproductIdDatasetsDatasetIdJSONBody NewDataset

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	Q *string `json:"q,omitempty"`
}

// PostDataproductsJSONRequestBody defines body for PostDataproducts for application/json ContentType.
type PostDataproductsJSONRequestBody PostDataproductsJSONBody

// PutDataproductsDataproductIdJSONRequestBody defines body for PutDataproductsDataproductId for application/json ContentType.
type PutDataproductsDataproductIdJSONRequestBody PutDataproductsDataproductIdJSONBody

// PostDataproductsDataproductIdDatasetsJSONRequestBody defines body for PostDataproductsDataproductIdDatasets for application/json ContentType.
type PostDataproductsDataproductIdDatasetsJSONRequestBody PostDataproductsDataproductIdDatasetsJSONBody

// PutDataproductsDataproductIdDatasetsDatasetIdJSONRequestBody defines body for PutDataproductsDataproductIdDatasetsDatasetId for application/json ContentType.
type PutDataproductsDataproductIdDatasetsDatasetIdJSONRequestBody PutDataproductsDataproductIdDatasetsDatasetIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDataproducts request
	GetDataproducts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDataproducts request with any body
	PostDataproductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDataproducts(ctx context.Context, body PostDataproductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDataproductsDataproductId request
	DeleteDataproductsDataproductId(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataproductsDataproductId request
	GetDataproductsDataproductId(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDataproductsDataproductId request with any body
	PutDataproductsDataproductIdWithBody(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDataproductsDataproductId(ctx context.Context, dataproductId string, body PutDataproductsDataproductIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataproductsDataproductIdDatasets request
	GetDataproductsDataproductIdDatasets(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDataproductsDataproductIdDatasets request with any body
	PostDataproductsDataproductIdDatasetsWithBody(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDataproductsDataproductIdDatasets(ctx context.Context, dataproductId string, body PostDataproductsDataproductIdDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDataset request
	DeleteDataset(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataproductsDataproductIdDatasetsDatasetId request
	GetDataproductsDataproductIdDatasetsDatasetId(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDataproductsDataproductIdDatasetsDatasetId request with any body
	PutDataproductsDataproductIdDatasetsDatasetIdWithBody(ctx context.Context, dataproductId string, datasetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDataproductsDataproductIdDatasetsDatasetId(ctx context.Context, dataproductId string, datasetId string, body PutDataproductsDataproductIdDatasetsDatasetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearch request
	GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDataproducts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataproductsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDataproductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDataproductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDataproducts(ctx context.Context, body PostDataproductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDataproductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDataproductsDataproductId(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDataproductsDataproductIdRequest(c.Server, dataproductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataproductsDataproductId(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataproductsDataproductIdRequest(c.Server, dataproductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDataproductsDataproductIdWithBody(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDataproductsDataproductIdRequestWithBody(c.Server, dataproductId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDataproductsDataproductId(ctx context.Context, dataproductId string, body PutDataproductsDataproductIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDataproductsDataproductIdRequest(c.Server, dataproductId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataproductsDataproductIdDatasets(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataproductsDataproductIdDatasetsRequest(c.Server, dataproductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDataproductsDataproductIdDatasetsWithBody(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDataproductsDataproductIdDatasetsRequestWithBody(c.Server, dataproductId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDataproductsDataproductIdDatasets(ctx context.Context, dataproductId string, body PostDataproductsDataproductIdDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDataproductsDataproductIdDatasetsRequest(c.Server, dataproductId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDataset(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatasetRequest(c.Server, dataproductId, datasetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataproductsDataproductIdDatasetsDatasetId(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataproductsDataproductIdDatasetsDatasetIdRequest(c.Server, dataproductId, datasetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDataproductsDataproductIdDatasetsDatasetIdWithBody(ctx context.Context, dataproductId string, datasetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDataproductsDataproductIdDatasetsDatasetIdRequestWithBody(c.Server, dataproductId, datasetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDataproductsDataproductIdDatasetsDatasetId(ctx context.Context, dataproductId string, datasetId string, body PutDataproductsDataproductIdDatasetsDatasetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDataproductsDataproductIdDatasetsDatasetIdRequest(c.Server, dataproductId, datasetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDataproductsRequest generates requests for GetDataproducts
func NewGetDataproductsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDataproductsRequest calls the generic PostDataproducts builder with application/json body
func NewPostDataproductsRequest(server string, body PostDataproductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDataproductsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDataproductsRequestWithBody generates requests for PostDataproducts with any type of body
func NewPostDataproductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDataproductsDataproductIdRequest generates requests for DeleteDataproductsDataproductId
func NewDeleteDataproductsDataproductIdRequest(server string, dataproductId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDataproductsDataproductIdRequest generates requests for GetDataproductsDataproductId
func NewGetDataproductsDataproductIdRequest(server string, dataproductId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDataproductsDataproductIdRequest calls the generic PutDataproductsDataproductId builder with application/json body
func NewPutDataproductsDataproductIdRequest(server string, dataproductId string, body PutDataproductsDataproductIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDataproductsDataproductIdRequestWithBody(server, dataproductId, "application/json", bodyReader)
}

// NewPutDataproductsDataproductIdRequestWithBody generates requests for PutDataproductsDataproductId with any type of body
func NewPutDataproductsDataproductIdRequestWithBody(server string, dataproductId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDataproductsDataproductIdDatasetsRequest generates requests for GetDataproductsDataproductIdDatasets
func NewGetDataproductsDataproductIdDatasetsRequest(server string, dataproductId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s/datasets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDataproductsDataproductIdDatasetsRequest calls the generic PostDataproductsDataproductIdDatasets builder with application/json body
func NewPostDataproductsDataproductIdDatasetsRequest(server string, dataproductId string, body PostDataproductsDataproductIdDatasetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDataproductsDataproductIdDatasetsRequestWithBody(server, dataproductId, "application/json", bodyReader)
}

// NewPostDataproductsDataproductIdDatasetsRequestWithBody generates requests for PostDataproductsDataproductIdDatasets with any type of body
func NewPostDataproductsDataproductIdDatasetsRequestWithBody(server string, dataproductId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s/datasets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatasetRequest generates requests for DeleteDataset
func NewDeleteDatasetRequest(server string, dataproductId string, datasetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, datasetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s/datasets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDataproductsDataproductIdDatasetsDatasetIdRequest generates requests for GetDataproductsDataproductIdDatasetsDatasetId
func NewGetDataproductsDataproductIdDatasetsDatasetIdRequest(server string, dataproductId string, datasetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, datasetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s/datasets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDataproductsDataproductIdDatasetsDatasetIdRequest calls the generic PutDataproductsDataproductIdDatasetsDatasetId builder with application/json body
func NewPutDataproductsDataproductIdDatasetsDatasetIdRequest(server string, dataproductId string, datasetId string, body PutDataproductsDataproductIdDatasetsDatasetIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDataproductsDataproductIdDatasetsDatasetIdRequestWithBody(server, dataproductId, datasetId, "application/json", bodyReader)
}

// NewPutDataproductsDataproductIdDatasetsDatasetIdRequestWithBody generates requests for PutDataproductsDataproductIdDatasetsDatasetId with any type of body
func NewPutDataproductsDataproductIdDatasetsDatasetIdRequestWithBody(server string, dataproductId string, datasetId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, datasetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s/datasets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSearchRequest generates requests for GetSearch
func NewGetSearchRequest(server string, params *GetSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDataproducts request
	GetDataproductsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDataproductsResponse, error)

	// PostDataproducts request with any body
	PostDataproductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDataproductsResponse, error)

	PostDataproductsWithResponse(ctx context.Context, body PostDataproductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDataproductsResponse, error)

	// DeleteDataproductsDataproductId request
	DeleteDataproductsDataproductIdWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*DeleteDataproductsDataproductIdResponse, error)

	// GetDataproductsDataproductId request
	GetDataproductsDataproductIdWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*GetDataproductsDataproductIdResponse, error)

	// PutDataproductsDataproductId request with any body
	PutDataproductsDataproductIdWithBodyWithResponse(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDataproductsDataproductIdResponse, error)

	PutDataproductsDataproductIdWithResponse(ctx context.Context, dataproductId string, body PutDataproductsDataproductIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDataproductsDataproductIdResponse, error)

	// GetDataproductsDataproductIdDatasets request
	GetDataproductsDataproductIdDatasetsWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*GetDataproductsDataproductIdDatasetsResponse, error)

	// PostDataproductsDataproductIdDatasets request with any body
	PostDataproductsDataproductIdDatasetsWithBodyWithResponse(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDataproductsDataproductIdDatasetsResponse, error)

	PostDataproductsDataproductIdDatasetsWithResponse(ctx context.Context, dataproductId string, body PostDataproductsDataproductIdDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDataproductsDataproductIdDatasetsResponse, error)

	// DeleteDataset request
	DeleteDatasetWithResponse(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*DeleteDatasetResponse, error)

	// GetDataproductsDataproductIdDatasetsDatasetId request
	GetDataproductsDataproductIdDatasetsDatasetIdWithResponse(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*GetDataproductsDataproductIdDatasetsDatasetIdResponse, error)

	// PutDataproductsDataproductIdDatasetsDatasetId request with any body
	PutDataproductsDataproductIdDatasetsDatasetIdWithBodyWithResponse(ctx context.Context, dataproductId string, datasetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDataproductsDataproductIdDatasetsDatasetIdResponse, error)

	PutDataproductsDataproductIdDatasetsDatasetIdWithResponse(ctx context.Context, dataproductId string, datasetId string, body PutDataproductsDataproductIdDatasetsDatasetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDataproductsDataproductIdDatasetsDatasetIdResponse, error)

	// GetSearch request
	GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error)
}

type GetDataproductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Dataproduct
}

// Status returns HTTPResponse.Status
func (r GetDataproductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataproductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDataproductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Dataproduct
}

// Status returns HTTPResponse.Status
func (r PostDataproductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDataproductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDataproductsDataproductIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDataproductsDataproductIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDataproductsDataproductIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataproductsDataproductIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Dataproduct
}

// Status returns HTTPResponse.Status
func (r GetDataproductsDataproductIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataproductsDataproductIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDataproductsDataproductIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dataproduct
}

// Status returns HTTPResponse.Status
func (r PutDataproductsDataproductIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDataproductsDataproductIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataproductsDataproductIdDatasetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Dataset
}

// Status returns HTTPResponse.Status
func (r GetDataproductsDataproductIdDatasetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataproductsDataproductIdDatasetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDataproductsDataproductIdDatasetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Dataset
}

// Status returns HTTPResponse.Status
func (r PostDataproductsDataproductIdDatasetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDataproductsDataproductIdDatasetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataproductsDataproductIdDatasetsDatasetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dataset
}

// Status returns HTTPResponse.Status
func (r GetDataproductsDataproductIdDatasetsDatasetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataproductsDataproductIdDatasetsDatasetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDataproductsDataproductIdDatasetsDatasetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dataset
}

// Status returns HTTPResponse.Status
func (r PutDataproductsDataproductIdDatasetsDatasetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDataproductsDataproductIdDatasetsDatasetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchResultEntry
}

// Status returns HTTPResponse.Status
func (r GetSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDataproductsWithResponse request returning *GetDataproductsResponse
func (c *ClientWithResponses) GetDataproductsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDataproductsResponse, error) {
	rsp, err := c.GetDataproducts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataproductsResponse(rsp)
}

// PostDataproductsWithBodyWithResponse request with arbitrary body returning *PostDataproductsResponse
func (c *ClientWithResponses) PostDataproductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDataproductsResponse, error) {
	rsp, err := c.PostDataproductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDataproductsResponse(rsp)
}

func (c *ClientWithResponses) PostDataproductsWithResponse(ctx context.Context, body PostDataproductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDataproductsResponse, error) {
	rsp, err := c.PostDataproducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDataproductsResponse(rsp)
}

// DeleteDataproductsDataproductIdWithResponse request returning *DeleteDataproductsDataproductIdResponse
func (c *ClientWithResponses) DeleteDataproductsDataproductIdWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*DeleteDataproductsDataproductIdResponse, error) {
	rsp, err := c.DeleteDataproductsDataproductId(ctx, dataproductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDataproductsDataproductIdResponse(rsp)
}

// GetDataproductsDataproductIdWithResponse request returning *GetDataproductsDataproductIdResponse
func (c *ClientWithResponses) GetDataproductsDataproductIdWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*GetDataproductsDataproductIdResponse, error) {
	rsp, err := c.GetDataproductsDataproductId(ctx, dataproductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataproductsDataproductIdResponse(rsp)
}

// PutDataproductsDataproductIdWithBodyWithResponse request with arbitrary body returning *PutDataproductsDataproductIdResponse
func (c *ClientWithResponses) PutDataproductsDataproductIdWithBodyWithResponse(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDataproductsDataproductIdResponse, error) {
	rsp, err := c.PutDataproductsDataproductIdWithBody(ctx, dataproductId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDataproductsDataproductIdResponse(rsp)
}

func (c *ClientWithResponses) PutDataproductsDataproductIdWithResponse(ctx context.Context, dataproductId string, body PutDataproductsDataproductIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDataproductsDataproductIdResponse, error) {
	rsp, err := c.PutDataproductsDataproductId(ctx, dataproductId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDataproductsDataproductIdResponse(rsp)
}

// GetDataproductsDataproductIdDatasetsWithResponse request returning *GetDataproductsDataproductIdDatasetsResponse
func (c *ClientWithResponses) GetDataproductsDataproductIdDatasetsWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*GetDataproductsDataproductIdDatasetsResponse, error) {
	rsp, err := c.GetDataproductsDataproductIdDatasets(ctx, dataproductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataproductsDataproductIdDatasetsResponse(rsp)
}

// PostDataproductsDataproductIdDatasetsWithBodyWithResponse request with arbitrary body returning *PostDataproductsDataproductIdDatasetsResponse
func (c *ClientWithResponses) PostDataproductsDataproductIdDatasetsWithBodyWithResponse(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDataproductsDataproductIdDatasetsResponse, error) {
	rsp, err := c.PostDataproductsDataproductIdDatasetsWithBody(ctx, dataproductId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDataproductsDataproductIdDatasetsResponse(rsp)
}

func (c *ClientWithResponses) PostDataproductsDataproductIdDatasetsWithResponse(ctx context.Context, dataproductId string, body PostDataproductsDataproductIdDatasetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDataproductsDataproductIdDatasetsResponse, error) {
	rsp, err := c.PostDataproductsDataproductIdDatasets(ctx, dataproductId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDataproductsDataproductIdDatasetsResponse(rsp)
}

// DeleteDatasetWithResponse request returning *DeleteDatasetResponse
func (c *ClientWithResponses) DeleteDatasetWithResponse(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*DeleteDatasetResponse, error) {
	rsp, err := c.DeleteDataset(ctx, dataproductId, datasetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatasetResponse(rsp)
}

// GetDataproductsDataproductIdDatasetsDatasetIdWithResponse request returning *GetDataproductsDataproductIdDatasetsDatasetIdResponse
func (c *ClientWithResponses) GetDataproductsDataproductIdDatasetsDatasetIdWithResponse(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*GetDataproductsDataproductIdDatasetsDatasetIdResponse, error) {
	rsp, err := c.GetDataproductsDataproductIdDatasetsDatasetId(ctx, dataproductId, datasetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataproductsDataproductIdDatasetsDatasetIdResponse(rsp)
}

// PutDataproductsDataproductIdDatasetsDatasetIdWithBodyWithResponse request with arbitrary body returning *PutDataproductsDataproductIdDatasetsDatasetIdResponse
func (c *ClientWithResponses) PutDataproductsDataproductIdDatasetsDatasetIdWithBodyWithResponse(ctx context.Context, dataproductId string, datasetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDataproductsDataproductIdDatasetsDatasetIdResponse, error) {
	rsp, err := c.PutDataproductsDataproductIdDatasetsDatasetIdWithBody(ctx, dataproductId, datasetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDataproductsDataproductIdDatasetsDatasetIdResponse(rsp)
}

func (c *ClientWithResponses) PutDataproductsDataproductIdDatasetsDatasetIdWithResponse(ctx context.Context, dataproductId string, datasetId string, body PutDataproductsDataproductIdDatasetsDatasetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDataproductsDataproductIdDatasetsDatasetIdResponse, error) {
	rsp, err := c.PutDataproductsDataproductIdDatasetsDatasetId(ctx, dataproductId, datasetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDataproductsDataproductIdDatasetsDatasetIdResponse(rsp)
}

// GetSearchWithResponse request returning *GetSearchResponse
func (c *ClientWithResponses) GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error) {
	rsp, err := c.GetSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResponse(rsp)
}

// ParseGetDataproductsResponse parses an HTTP response from a GetDataproductsWithResponse call
func ParseGetDataproductsResponse(rsp *http.Response) (*GetDataproductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDataproductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Dataproduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDataproductsResponse parses an HTTP response from a PostDataproductsWithResponse call
func ParsePostDataproductsResponse(rsp *http.Response) (*PostDataproductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDataproductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Dataproduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteDataproductsDataproductIdResponse parses an HTTP response from a DeleteDataproductsDataproductIdWithResponse call
func ParseDeleteDataproductsDataproductIdResponse(rsp *http.Response) (*DeleteDataproductsDataproductIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteDataproductsDataproductIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDataproductsDataproductIdResponse parses an HTTP response from a GetDataproductsDataproductIdWithResponse call
func ParseGetDataproductsDataproductIdResponse(rsp *http.Response) (*GetDataproductsDataproductIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDataproductsDataproductIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Dataproduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutDataproductsDataproductIdResponse parses an HTTP response from a PutDataproductsDataproductIdWithResponse call
func ParsePutDataproductsDataproductIdResponse(rsp *http.Response) (*PutDataproductsDataproductIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutDataproductsDataproductIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dataproduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDataproductsDataproductIdDatasetsResponse parses an HTTP response from a GetDataproductsDataproductIdDatasetsWithResponse call
func ParseGetDataproductsDataproductIdDatasetsResponse(rsp *http.Response) (*GetDataproductsDataproductIdDatasetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDataproductsDataproductIdDatasetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Dataset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDataproductsDataproductIdDatasetsResponse parses an HTTP response from a PostDataproductsDataproductIdDatasetsWithResponse call
func ParsePostDataproductsDataproductIdDatasetsResponse(rsp *http.Response) (*PostDataproductsDataproductIdDatasetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDataproductsDataproductIdDatasetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Dataset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteDatasetResponse parses an HTTP response from a DeleteDatasetWithResponse call
func ParseDeleteDatasetResponse(rsp *http.Response) (*DeleteDatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDataproductsDataproductIdDatasetsDatasetIdResponse parses an HTTP response from a GetDataproductsDataproductIdDatasetsDatasetIdWithResponse call
func ParseGetDataproductsDataproductIdDatasetsDatasetIdResponse(rsp *http.Response) (*GetDataproductsDataproductIdDatasetsDatasetIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDataproductsDataproductIdDatasetsDatasetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dataset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutDataproductsDataproductIdDatasetsDatasetIdResponse parses an HTTP response from a PutDataproductsDataproductIdDatasetsDatasetIdWithResponse call
func ParsePutDataproductsDataproductIdDatasetsDatasetIdResponse(rsp *http.Response) (*PutDataproductsDataproductIdDatasetsDatasetIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutDataproductsDataproductIdDatasetsDatasetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dataset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchResponse parses an HTTP response from a GetSearchWithResponse call
func ParseGetSearchResponse(rsp *http.Response) (*GetSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchResultEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dataproducts)
	GetDataproducts(ctx echo.Context) error

	// (POST /dataproducts)
	PostDataproducts(ctx echo.Context) error

	// (DELETE /dataproducts/{dataproduct_id})
	DeleteDataproductsDataproductId(ctx echo.Context, dataproductId string) error

	// (GET /dataproducts/{dataproduct_id})
	GetDataproductsDataproductId(ctx echo.Context, dataproductId string) error

	// (PUT /dataproducts/{dataproduct_id})
	PutDataproductsDataproductId(ctx echo.Context, dataproductId string) error

	// (GET /dataproducts/{dataproduct_id}/datasets)
	GetDataproductsDataproductIdDatasets(ctx echo.Context, dataproductId string) error

	// (POST /dataproducts/{dataproduct_id}/datasets)
	PostDataproductsDataproductIdDatasets(ctx echo.Context, dataproductId string) error

	// (DELETE /dataproducts/{dataproduct_id}/datasets/{dataset_id})
	DeleteDataset(ctx echo.Context, dataproductId string, datasetId string) error

	// (GET /dataproducts/{dataproduct_id}/datasets/{dataset_id})
	GetDataproductsDataproductIdDatasetsDatasetId(ctx echo.Context, dataproductId string, datasetId string) error

	// (PUT /dataproducts/{dataproduct_id}/datasets/{dataset_id})
	PutDataproductsDataproductIdDatasetsDatasetId(ctx echo.Context, dataproductId string, datasetId string) error

	// (GET /search)
	GetSearch(ctx echo.Context, params GetSearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDataproducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDataproducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDataproducts(ctx)
	return err
}

// PostDataproducts converts echo context to params.
func (w *ServerInterfaceWrapper) PostDataproducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDataproducts(ctx)
	return err
}

// DeleteDataproductsDataproductId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDataproductsDataproductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDataproductsDataproductId(ctx, dataproductId)
	return err
}

// GetDataproductsDataproductId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDataproductsDataproductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDataproductsDataproductId(ctx, dataproductId)
	return err
}

// PutDataproductsDataproductId converts echo context to params.
func (w *ServerInterfaceWrapper) PutDataproductsDataproductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDataproductsDataproductId(ctx, dataproductId)
	return err
}

// GetDataproductsDataproductIdDatasets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDataproductsDataproductIdDatasets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDataproductsDataproductIdDatasets(ctx, dataproductId)
	return err
}

// PostDataproductsDataproductIdDatasets converts echo context to params.
func (w *ServerInterfaceWrapper) PostDataproductsDataproductIdDatasets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDataproductsDataproductIdDatasets(ctx, dataproductId)
	return err
}

// DeleteDataset converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDataset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// ------------- Path parameter "dataset_id" -------------
	var datasetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, ctx.Param("dataset_id"), &datasetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataset_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDataset(ctx, dataproductId, datasetId)
	return err
}

// GetDataproductsDataproductIdDatasetsDatasetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDataproductsDataproductIdDatasetsDatasetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// ------------- Path parameter "dataset_id" -------------
	var datasetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, ctx.Param("dataset_id"), &datasetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataset_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDataproductsDataproductIdDatasetsDatasetId(ctx, dataproductId, datasetId)
	return err
}

// PutDataproductsDataproductIdDatasetsDatasetId converts echo context to params.
func (w *ServerInterfaceWrapper) PutDataproductsDataproductIdDatasetsDatasetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// ------------- Path parameter "dataset_id" -------------
	var datasetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, ctx.Param("dataset_id"), &datasetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataset_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDataproductsDataproductIdDatasetsDatasetId(ctx, dataproductId, datasetId)
	return err
}

// GetSearch converts echo context to params.
func (w *ServerInterfaceWrapper) GetSearch(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSearch(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dataproducts", wrapper.GetDataproducts)
	router.POST(baseURL+"/dataproducts", wrapper.PostDataproducts)
	router.DELETE(baseURL+"/dataproducts/:dataproduct_id", wrapper.DeleteDataproductsDataproductId)
	router.GET(baseURL+"/dataproducts/:dataproduct_id", wrapper.GetDataproductsDataproductId)
	router.PUT(baseURL+"/dataproducts/:dataproduct_id", wrapper.PutDataproductsDataproductId)
	router.GET(baseURL+"/dataproducts/:dataproduct_id/datasets", wrapper.GetDataproductsDataproductIdDatasets)
	router.POST(baseURL+"/dataproducts/:dataproduct_id/datasets", wrapper.PostDataproductsDataproductIdDatasets)
	router.DELETE(baseURL+"/dataproducts/:dataproduct_id/datasets/:dataset_id", wrapper.DeleteDataset)
	router.GET(baseURL+"/dataproducts/:dataproduct_id/datasets/:dataset_id", wrapper.GetDataproductsDataproductIdDatasetsDatasetId)
	router.PUT(baseURL+"/dataproducts/:dataproduct_id/datasets/:dataset_id", wrapper.PutDataproductsDataproductIdDatasetsDatasetId)
	router.GET(baseURL+"/search", wrapper.GetSearch)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXW/CNhT9K9HdHhGh3Z7yto2pQpu2auueqqoyyQXcJrGxb8oQyn+fYhOSECdpKwpo",
	"21NTf9yPc8+xL95BKBIpUkxJQ7ADHa4wYeZzyohJJaIspOJfqYRERRzNZKiQEUbFJ20lQgCaFE+XkI8g",
	"YsQ0WnucMNHt7dy90w7s4FuFCwjgG78Kzt9H5k+t9YdiaX7YA2L+giFVRoApxbYmHNSh4pK4SJ1OO2J5",
	"xe1GqKiRREfAla+YaXpORMQXvAOclCXonBCbFFUbKUKWuF0jS14ZsVgs0ZVYPgKF64yrIpBHa+fJAZdC",
	"KZwOdJwth+2afMroXfb39WpnNufLdYZq256Jqi2tqKQSheXnLgaxeYzDUdesHPgK5W5XFlElhi7Xn+RZ",
	"JyEk57XxuRAxstRN+bomgh1gmiVFlgeEq4wq87/hplfhQ+l8Sh8nYv+1cHuP4b+A3gPF/gRJHUAWi0cu",
	"VlaB/IlMhas/UGcx/ZySCz78O0Ql6SQaoyPFVFjVBF/+x8JXtkSnmDIVu6tylGAxxNOFJSWnopbww/3M",
	"ezDfI3hDpU0N4GY8MbqQmDLJIYDvxpPxbQEio5XBwa+FaAaWllONWsKvXJPH4thrrDaGFSvWzCII4A5p",
	"2pxXqKVItYX8djIxl75ICVPjhEkZ89AY8F+0ZY29oRsHwtBFXiLcOiryY1LC77/YUSm0I82fTD/iMS/F",
	"jdesXTPTe6Hbqa4z1PSjiLYfyrIvuaPTNc+tJBqY3pzM25GrkROcyNNZGKLWiyyOt/uQGiTyd81rLrc4",
	"x0jYRnxqxj3Wi7ZdVMe79j2LDJ0VS5BQaQgeWz6qxd5sCoV2IDAKgFLUxzdz/eAhleGoBuGxPJ9aJfm+",
	"K8/IK/nXo7I6FN6G08o7tMIDgrtuVK5I/JkD/L9kxAaZeJ9dN+CXOYIm5zqCbI1KFQ0ePH79N+TwvVas",
	"9BZCDXCgT3TTSqn/CfEVXc7pb13bO/XfuFcL+5dJ0GD99R3A3s3Jbv+DCO2Mxo/1BC4uVP2Anb1kzUcu",
	"fxr7fVkQLtRl3CF1Ivues23/9+IX3uWQn5xDcO9vVpzHZfZ/Ia/keD4LW9qdkTZvILXOp6V0+0pyll/p",
	"7QeZd3QNdpOnzK69GJo0Ndywz0AHcqyhlwOFFY3qrTRh3lxgRSR14PtM8rGdHRNq8t9uIH/K/wkAAP//",
	"YpeQzN8YAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
