openapi: 3.0.2
info:
  title: NADA
  version: "1.0"
servers:
  - url: "http://localhost:8080/api"
  - url: "https://nada.dev.intern.nav.no/api"
  - url: "https://nada.intern.nav.no/api"

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt
  schemas:
    Collection:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        repo:
          type: string
        last_modified:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
        owner:
          $ref: "#/components/schemas/Owner"
        keywords:
          type: array
          items:
            type: string
        elements:
          type: array
          items:
            $ref: "#/components/schemas/CollectionElement"
      required:
        - id
        - name
        - slug
        - owner
        - created
        - last_modified
        - elements

    NewCollection:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        repo:
          type: string
        owner:
          $ref: "#/components/schemas/Owner"
        keywords:
          type: array
          items:
            type: string
      required:
        - name
        - owner

    UpdateCollection:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        repo:
          type: string
        keywords:
          type: array
          items:
            type: string
      required:
        - name

    Dataproduct:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        repo:
          type: string
        pii:
          type: boolean
        keywords:
          type: array
          items:
            type: string
        owner:
          $ref: "#/components/schemas/Owner"
        type:
          $ref: "#/components/schemas/DataproductType"
        datasource:
          $ref: "#/components/schemas/Datasource"
      required:
        - id
        - name
        - type
        - pii
        - owner
        - datasource
        - keywords

    Datasource:
      oneOf:
        - $ref: "#/components/schemas/Bigquery"

    NewDataproduct:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        repo:
          type: string
        pii:
          type: boolean
        keywords:
          type: array
          items:
            type: string
        owner:
          $ref: "#/components/schemas/Owner"
        datasource:
          $ref: "#/components/schemas/Datasource"
      required:
        - name
        - pii
        - owner
        - datasource

    UpdateDataproduct:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        repo:
          type: string
        pii:
          type: boolean
        keywords:
          type: array
          items:
            type: string
      required:
        - name
        - pii

    DataproductSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          $ref: "#/components/schemas/DataproductType"
      required:
        - id
        - name
        - type

    DataproductType:
      type: string
      enum:
        - bigquery

    Owner:
      type: object
      properties:
        group:
          type: string
        teamkatalogen:
          type: string
      required:
        - group

    Bigquery:
      type: object
      properties:
        project_id:
          type: string
        dataset:
          type: string
        table:
          type: string
      required:
        - project_id
        - dataset
        - table

    BigqueryType:
      type: string
      enum:
        - table
        - view

    BigqueryTypeMetadata:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: "#/components/schemas/BigqueryType"
        description:
          type: string
        last_modified:
          type: string
          format: date-time
      required:
        - name
        - type
        - description
        - last_modified

    UserInfo:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        groups:
          type: array
          items:
            $ref: "#/components/schemas/Group"
      required:
        - name
        - email
        - groups

    TableColumn:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        mode:
          type: string
        description:
          type: string
      required:
        - name
        - type
        - mode
        - description

    DataproductMetadata:
      type: object
      properties:
        dataproduct_id:
          type: string
        schema:
          type: array
          items:
            $ref: "#/components/schemas/TableColumn"
      required:
        - dataproduct_id
        - schema

    SearchResultEntry:
      type: object
      properties:
        url:
          type: string
        type:
          $ref: "#/components/schemas/SearchResultType"
        id:
          type: string
        name:
          type: string
        excerpt:
          type: string
      required:
        - url
        - type
        - id
        - name
        - excerpt

    SearchResultType:
      type: string
      enum:
        - dataproduct
        - collection
        - datapackage

    Group:
      type: object
      properties:
        email:
          type: string
          description: "Email and ID of the group"
        name:
          type: string
      required:
        - email
        - name

    CollectionElementType:
      type: string
      enum:
        - dataproduct

    CollectionElement:
      type: object
      properties:
        element_type:
          $ref: "#/components/schemas/CollectionElementType"
        element_id:
          type: string
      required:
        - element_type
        - element_id

paths:
  /userinfo:
    get:
      security:
        - cookieAuth: []
      description: "get user info"
      operationId: "getUserInfo"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/UserInfo"

  /groups/{id}/gcp_projects:
    parameters:
      - in: path
        name: id
        description: Group ID
        required: true
        schema:
          type: string
    get:
      security:
        - cookieAuth: []
      description: "Query and return all GCP projects for the group"
      operationId: "getGCPProjects"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  type: "string"

  /gcp/{id}/tables:
    parameters:
      - in: path
        name: id
        description: GCP project ID
        required: true
        schema:
          type: string
    get:
      security:
        - cookieAuth: []
      description: "Return all BigQuery tables in gcp project"
      operationId: "getBigqueryTables"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Bigquery"

  /gcp/{id}/datasets:
    parameters:
      - in: path
        name: id
        description: GCP project ID
        required: true
        schema:
          type: string
    get:
      security:
        - cookieAuth: []
      description: "Return all BigQuery datasets in gcp project"
      operationId: "getBigqueryDatasets"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  type: "string"

  /gcp/{projectId}/datasets/{datasetId}:
    parameters:
      - in: path
        name: projectId
        description: GCP project ID
        required: true
        schema:
          type: string
      - in: path
        name: datasetId
        description: BigQuery Dataset ID
        required: true
        schema:
          type: string
    get:
      security:
        - cookieAuth: []
      description: "Return all BigQuery tables and views in dataset in gcp project"
      operationId: "getBigqueryDataset"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/BigqueryTypeMetadata"

  /collections:
    get:
      description: "List all Collections"
      operationId: "getCollections"
      parameters:
        - in: "query"
          name: "limit"
          schema:
            type: "integer"
            default: 15
        - in: "query"
          name: "offset"
          schema:
            type: "integer"
            default: 0
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"
    post:
      security:
        - cookieAuth: []
      description: "Create a new Collection"
      operationId: "createCollection"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/NewCollection"
      responses:
        "201":
          description: "Created successfully"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Collection"

  /collections/{id}:
    get:
      description: "List a Collection of data types"
      operationId: "getCollection"
      parameters:
        - in: path
          name: id
          description: Collection ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Collection"
    delete:
      security:
        - cookieAuth: []
      description: "Delete a Collection"
      operationId: "deleteCollection"
      parameters:
        - in: path
          name: id
          description: Collection ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Deleted OK"
    put:
      security:
        - cookieAuth: []
      description: "Update a Collection"
      operationId: "updateCollection"
      parameters:
        - in: path
          name: id
          description: Collection ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UpdateCollection"
      responses:
        "200":
          description: "Updated OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Collection"

  /collections/{id}/add:
    post:
      security:
        - cookieAuth: []
      description: "Add to collection"
      operationId: "addToCollection"
      parameters:
        - in: path
          name: id
          description: Collection ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/CollectionElement"
      responses:
        "200":
          description: "Added OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/CollectionElement"

  /dataproducts:
    get:
      description: "Get dataproducts"
      parameters:
        - in: "query"
          name: "limit"
          schema:
            type: "integer"
            default: 15
        - in: "query"
          name: "offset"
          schema:
            type: "integer"
            default: 0
      operationId: "getDataproducts"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Dataproduct"
    post:
      security:
        - cookieAuth: []
      description: "Create a new dataproduct"
      operationId: "createDataproduct"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/NewDataproduct"
      responses:
        "201":
          description: "Created successfully"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Dataproduct"

  /dataproducts/{id}:
    get:
      description: "Get dataproduct"
      operationId: "getDataproduct"
      parameters:
        - in: path
          name: id
          description: Dataproduct ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Dataproduct"
    put:
      security:
        - cookieAuth: []
      description: "Update a dataproduct"
      operationId: "updateDataproduct"
      parameters:
        - in: path
          name: id
          description: Dataproduct ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UpdateDataproduct"
      responses:
        "200":
          description: "Updated OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Dataproduct"
    delete:
      security:
        - cookieAuth: []
      description: "Delete a dataproduct"
      operationId: "deleteDataproduct"
      parameters:
        - in: path
          name: id
          description: Dataproduct ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Deleted OK"

  /dataproducts/{id}/metadata:
    get:
      description: "Get dataproduct metadata"
      operationId: "getDataproductMetadata"
      parameters:
        - in: path
          name: id
          description: Dataproduct ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DataproductMetadata"

  /search:
    parameters:
      - in: query
        name: q
        schema:
          type: string
      - in: "query"
        name: "limit"
        schema:
          type: "integer"
          default: 15
      - in: "query"
        name: "offset"
        schema:
          type: "integer"
          default: 0

    get:
      description: "Search in NADA"
      operationId: "search"
      responses:
        "200":
          description: Search result
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResultEntry"
