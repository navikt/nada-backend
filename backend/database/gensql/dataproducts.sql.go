// Code generated by sqlc. DO NOT EDIT.
// source: dataproducts.sql

package gensql

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createDataproduct = `-- name: CreateDataproduct :one
INSERT INTO dataproducts (
	"name",
	"description",
	"slug",
	"repo",
	"team",
	"keywords"
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6
) RETURNING id, name, description, slug, repo, created, last_modified, team, keywords
`

type CreateDataproductParams struct {
	Name        string
	Description sql.NullString
	Slug        string
	Repo        sql.NullString
	Team        string
	Keywords    []string
}

func (q *Queries) CreateDataproduct(ctx context.Context, arg CreateDataproductParams) (Dataproduct, error) {
	row := q.db.QueryRowContext(ctx, createDataproduct,
		arg.Name,
		arg.Description,
		arg.Slug,
		arg.Repo,
		arg.Team,
		pq.Array(arg.Keywords),
	)
	var i Dataproduct
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Slug,
		&i.Repo,
		&i.Created,
		&i.LastModified,
		&i.Team,
		pq.Array(&i.Keywords),
	)
	return i, err
}

const deleteDataproduct = `-- name: DeleteDataproduct :exec
DELETE FROM dataproducts WHERE id = $1
`

func (q *Queries) DeleteDataproduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDataproduct, id)
	return err
}

const getDataproducts = `-- name: GetDataproducts :many
SELECT id, name, description, slug, repo, created, last_modified, team, keywords FROM dataproducts
`

func (q *Queries) GetDataproducts(ctx context.Context) ([]Dataproduct, error) {
	rows, err := q.db.QueryContext(ctx, getDataproducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dataproduct{}
	for rows.Next() {
		var i Dataproduct
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Slug,
			&i.Repo,
			&i.Created,
			&i.LastModified,
			&i.Team,
			pq.Array(&i.Keywords),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDataproduct = `-- name: UpdateDataproduct :one
UPDATE dataproducts SET
	"name" = $1,
	"description" = $2,
	"slug" = $3,
	"repo" = $4,
	"team" = $5,
	"keywords" = $6
WHERE id = $7
RETURNING id, name, description, slug, repo, created, last_modified, team, keywords
`

type UpdateDataproductParams struct {
	Name        string
	Description sql.NullString
	Slug        string
	Repo        sql.NullString
	Team        string
	Keywords    []string
	ID          uuid.UUID
}

func (q *Queries) UpdateDataproduct(ctx context.Context, arg UpdateDataproductParams) (Dataproduct, error) {
	row := q.db.QueryRowContext(ctx, updateDataproduct,
		arg.Name,
		arg.Description,
		arg.Slug,
		arg.Repo,
		arg.Team,
		pq.Array(arg.Keywords),
		arg.ID,
	)
	var i Dataproduct
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Slug,
		&i.Repo,
		&i.Created,
		&i.LastModified,
		&i.Team,
		pq.Array(&i.Keywords),
	)
	return i, err
}
