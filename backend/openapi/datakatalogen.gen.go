// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for DatasetType.
const (
	DatasetTypeBigquery DatasetType = "bigquery"
)

// Defines values for SearchResultEntryType.
const (
	SearchResultEntryTypeDatapackage SearchResultEntryType = "datapackage"

	SearchResultEntryTypeDataproduct SearchResultEntryType = "dataproduct"

	SearchResultEntryTypeDataset SearchResultEntryType = "dataset"
)

// Dataproduct defines model for Dataproduct.
type Dataproduct struct {
	Created  time.Time `json:"created"`
	Datasets *[]struct {
		Id   *string      `json:"id,omitempty"`
		Type *DatasetType `json:"type,omitempty"`
	} `json:"datasets,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Id           string    `json:"id"`
	Keyword      *[]string `json:"keyword,omitempty"`
	LastModified time.Time `json:"last_modified"`
	Name         string    `json:"name"`
	Owner        Owner     `json:"owner"`
	Repo         *string   `json:"repo,omitempty"`
	Slug         string    `json:"slug"`
}

// Dataset defines model for Dataset.
type Dataset struct {
	Bigquery *struct {
		Dataset   string `json:"dataset"`
		ProjectId string `json:"project_id"`
		Table     string `json:"table"`
	} `json:"bigquery,omitempty"`
	DataproductId *string `json:"dataproduct_id,omitempty"`
	Description   *string `json:"description,omitempty"`
	Id            *string `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
	Pii           *bool   `json:"pii,omitempty"`
}

// DatasetType defines model for DatasetType.
type DatasetType string

// NewDataproduct defines model for NewDataproduct.
type NewDataproduct struct {
	Description *string   `json:"description,omitempty"`
	Keyword     *[]string `json:"keyword,omitempty"`
	Name        string    `json:"name"`
	Owner       Owner     `json:"owner"`
	Repo        *string   `json:"repo,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// NewDataset defines model for NewDataset.
type NewDataset struct {
	Bigquery struct {
		Dataset   string `json:"dataset"`
		ProjectId string `json:"project_id"`
		Table     string `json:"table"`
	} `json:"bigquery"`
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Pii         bool    `json:"pii"`
}

// Owner defines model for Owner.
type Owner struct {
	Team          string  `json:"team"`
	Teamkatalogen *string `json:"teamkatalogen,omitempty"`
}

// SearchResultEntry defines model for SearchResultEntry.
type SearchResultEntry struct {
	Excerpt *string                `json:"excerpt,omitempty"`
	Id      *string                `json:"id,omitempty"`
	Name    *string                `json:"name,omitempty"`
	Type    *SearchResultEntryType `json:"type,omitempty"`
	Url     *string                `json:"url,omitempty"`
}

// SearchResultEntryType defines model for SearchResultEntry.Type.
type SearchResultEntryType string

// CreateDataproductJSONBody defines parameters for CreateDataproduct.
type CreateDataproductJSONBody NewDataproduct

// UpdateDataproductJSONBody defines parameters for UpdateDataproduct.
type UpdateDataproductJSONBody NewDataproduct

// CreateDatasetJSONBody defines parameters for CreateDataset.
type CreateDatasetJSONBody NewDataset

// UpdateDatasetJSONBody defines parameters for UpdateDataset.
type UpdateDatasetJSONBody NewDataset

// SearchParams defines parameters for Search.
type SearchParams struct {
	Q *string `json:"q,omitempty"`
}

// CreateDataproductJSONRequestBody defines body for CreateDataproduct for application/json ContentType.
type CreateDataproductJSONRequestBody CreateDataproductJSONBody

// UpdateDataproductJSONRequestBody defines body for UpdateDataproduct for application/json ContentType.
type UpdateDataproductJSONRequestBody UpdateDataproductJSONBody

// CreateDatasetJSONRequestBody defines body for CreateDataset for application/json ContentType.
type CreateDatasetJSONRequestBody CreateDatasetJSONBody

// UpdateDatasetJSONRequestBody defines body for UpdateDataset for application/json ContentType.
type UpdateDatasetJSONRequestBody UpdateDatasetJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDataproducts request
	GetDataproducts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDataproduct request with any body
	CreateDataproductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDataproduct(ctx context.Context, body CreateDataproductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDataproduct request
	DeleteDataproduct(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataproduct request
	GetDataproduct(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDataproduct request with any body
	UpdateDataproductWithBody(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDataproduct(ctx context.Context, dataproductId string, body UpdateDataproductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDatasets request
	GetDatasets(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDataset request with any body
	CreateDatasetWithBody(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDataset(ctx context.Context, dataproductId string, body CreateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDataset request
	DeleteDataset(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataset request
	GetDataset(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDataset request with any body
	UpdateDatasetWithBody(ctx context.Context, dataproductId string, datasetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDataset(ctx context.Context, dataproductId string, datasetId string, body UpdateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Search request
	Search(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDataproducts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataproductsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDataproductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDataproductRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDataproduct(ctx context.Context, body CreateDataproductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDataproductRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDataproduct(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDataproductRequest(c.Server, dataproductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataproduct(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataproductRequest(c.Server, dataproductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDataproductWithBody(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDataproductRequestWithBody(c.Server, dataproductId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDataproduct(ctx context.Context, dataproductId string, body UpdateDataproductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDataproductRequest(c.Server, dataproductId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDatasets(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatasetsRequest(c.Server, dataproductId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDatasetWithBody(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatasetRequestWithBody(c.Server, dataproductId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDataset(ctx context.Context, dataproductId string, body CreateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDatasetRequest(c.Server, dataproductId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDataset(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatasetRequest(c.Server, dataproductId, datasetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataset(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatasetRequest(c.Server, dataproductId, datasetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDatasetWithBody(ctx context.Context, dataproductId string, datasetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatasetRequestWithBody(c.Server, dataproductId, datasetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDataset(ctx context.Context, dataproductId string, datasetId string, body UpdateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDatasetRequest(c.Server, dataproductId, datasetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Search(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDataproductsRequest generates requests for GetDataproducts
func NewGetDataproductsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDataproductRequest calls the generic CreateDataproduct builder with application/json body
func NewCreateDataproductRequest(server string, body CreateDataproductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDataproductRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDataproductRequestWithBody generates requests for CreateDataproduct with any type of body
func NewCreateDataproductRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDataproductRequest generates requests for DeleteDataproduct
func NewDeleteDataproductRequest(server string, dataproductId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDataproductRequest generates requests for GetDataproduct
func NewGetDataproductRequest(server string, dataproductId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDataproductRequest calls the generic UpdateDataproduct builder with application/json body
func NewUpdateDataproductRequest(server string, dataproductId string, body UpdateDataproductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDataproductRequestWithBody(server, dataproductId, "application/json", bodyReader)
}

// NewUpdateDataproductRequestWithBody generates requests for UpdateDataproduct with any type of body
func NewUpdateDataproductRequestWithBody(server string, dataproductId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDatasetsRequest generates requests for GetDatasets
func NewGetDatasetsRequest(server string, dataproductId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s/datasets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDatasetRequest calls the generic CreateDataset builder with application/json body
func NewCreateDatasetRequest(server string, dataproductId string, body CreateDatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDatasetRequestWithBody(server, dataproductId, "application/json", bodyReader)
}

// NewCreateDatasetRequestWithBody generates requests for CreateDataset with any type of body
func NewCreateDatasetRequestWithBody(server string, dataproductId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s/datasets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatasetRequest generates requests for DeleteDataset
func NewDeleteDatasetRequest(server string, dataproductId string, datasetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, datasetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s/datasets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDatasetRequest generates requests for GetDataset
func NewGetDatasetRequest(server string, dataproductId string, datasetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, datasetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s/datasets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDatasetRequest calls the generic UpdateDataset builder with application/json body
func NewUpdateDatasetRequest(server string, dataproductId string, datasetId string, body UpdateDatasetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDatasetRequestWithBody(server, dataproductId, datasetId, "application/json", bodyReader)
}

// NewUpdateDatasetRequestWithBody generates requests for UpdateDataset with any type of body
func NewUpdateDatasetRequestWithBody(server string, dataproductId string, datasetId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, dataproductId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, datasetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dataproducts/%s/datasets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchRequest generates requests for Search
func NewSearchRequest(server string, params *SearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDataproducts request
	GetDataproductsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDataproductsResponse, error)

	// CreateDataproduct request with any body
	CreateDataproductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDataproductResponse, error)

	CreateDataproductWithResponse(ctx context.Context, body CreateDataproductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDataproductResponse, error)

	// DeleteDataproduct request
	DeleteDataproductWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*DeleteDataproductResponse, error)

	// GetDataproduct request
	GetDataproductWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*GetDataproductResponse, error)

	// UpdateDataproduct request with any body
	UpdateDataproductWithBodyWithResponse(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDataproductResponse, error)

	UpdateDataproductWithResponse(ctx context.Context, dataproductId string, body UpdateDataproductJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDataproductResponse, error)

	// GetDatasets request
	GetDatasetsWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*GetDatasetsResponse, error)

	// CreateDataset request with any body
	CreateDatasetWithBodyWithResponse(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatasetResponse, error)

	CreateDatasetWithResponse(ctx context.Context, dataproductId string, body CreateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatasetResponse, error)

	// DeleteDataset request
	DeleteDatasetWithResponse(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*DeleteDatasetResponse, error)

	// GetDataset request
	GetDatasetWithResponse(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*GetDatasetResponse, error)

	// UpdateDataset request with any body
	UpdateDatasetWithBodyWithResponse(ctx context.Context, dataproductId string, datasetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatasetResponse, error)

	UpdateDatasetWithResponse(ctx context.Context, dataproductId string, datasetId string, body UpdateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatasetResponse, error)

	// Search request
	SearchWithResponse(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*SearchResponse, error)
}

type GetDataproductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Dataproduct
}

// Status returns HTTPResponse.Status
func (r GetDataproductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataproductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDataproductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Dataproduct
}

// Status returns HTTPResponse.Status
func (r CreateDataproductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDataproductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDataproductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDataproductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDataproductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataproductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Dataproduct
}

// Status returns HTTPResponse.Status
func (r GetDataproductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataproductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDataproductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dataproduct
}

// Status returns HTTPResponse.Status
func (r UpdateDataproductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDataproductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatasetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Dataset
}

// Status returns HTTPResponse.Status
func (r GetDatasetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatasetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Dataset
}

// Status returns HTTPResponse.Status
func (r CreateDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dataset
}

// Status returns HTTPResponse.Status
func (r GetDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDatasetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dataset
}

// Status returns HTTPResponse.Status
func (r UpdateDatasetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDatasetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchResultEntry
}

// Status returns HTTPResponse.Status
func (r SearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDataproductsWithResponse request returning *GetDataproductsResponse
func (c *ClientWithResponses) GetDataproductsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDataproductsResponse, error) {
	rsp, err := c.GetDataproducts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataproductsResponse(rsp)
}

// CreateDataproductWithBodyWithResponse request with arbitrary body returning *CreateDataproductResponse
func (c *ClientWithResponses) CreateDataproductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDataproductResponse, error) {
	rsp, err := c.CreateDataproductWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDataproductResponse(rsp)
}

func (c *ClientWithResponses) CreateDataproductWithResponse(ctx context.Context, body CreateDataproductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDataproductResponse, error) {
	rsp, err := c.CreateDataproduct(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDataproductResponse(rsp)
}

// DeleteDataproductWithResponse request returning *DeleteDataproductResponse
func (c *ClientWithResponses) DeleteDataproductWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*DeleteDataproductResponse, error) {
	rsp, err := c.DeleteDataproduct(ctx, dataproductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDataproductResponse(rsp)
}

// GetDataproductWithResponse request returning *GetDataproductResponse
func (c *ClientWithResponses) GetDataproductWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*GetDataproductResponse, error) {
	rsp, err := c.GetDataproduct(ctx, dataproductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataproductResponse(rsp)
}

// UpdateDataproductWithBodyWithResponse request with arbitrary body returning *UpdateDataproductResponse
func (c *ClientWithResponses) UpdateDataproductWithBodyWithResponse(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDataproductResponse, error) {
	rsp, err := c.UpdateDataproductWithBody(ctx, dataproductId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDataproductResponse(rsp)
}

func (c *ClientWithResponses) UpdateDataproductWithResponse(ctx context.Context, dataproductId string, body UpdateDataproductJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDataproductResponse, error) {
	rsp, err := c.UpdateDataproduct(ctx, dataproductId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDataproductResponse(rsp)
}

// GetDatasetsWithResponse request returning *GetDatasetsResponse
func (c *ClientWithResponses) GetDatasetsWithResponse(ctx context.Context, dataproductId string, reqEditors ...RequestEditorFn) (*GetDatasetsResponse, error) {
	rsp, err := c.GetDatasets(ctx, dataproductId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatasetsResponse(rsp)
}

// CreateDatasetWithBodyWithResponse request with arbitrary body returning *CreateDatasetResponse
func (c *ClientWithResponses) CreateDatasetWithBodyWithResponse(ctx context.Context, dataproductId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDatasetResponse, error) {
	rsp, err := c.CreateDatasetWithBody(ctx, dataproductId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatasetResponse(rsp)
}

func (c *ClientWithResponses) CreateDatasetWithResponse(ctx context.Context, dataproductId string, body CreateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDatasetResponse, error) {
	rsp, err := c.CreateDataset(ctx, dataproductId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDatasetResponse(rsp)
}

// DeleteDatasetWithResponse request returning *DeleteDatasetResponse
func (c *ClientWithResponses) DeleteDatasetWithResponse(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*DeleteDatasetResponse, error) {
	rsp, err := c.DeleteDataset(ctx, dataproductId, datasetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDatasetResponse(rsp)
}

// GetDatasetWithResponse request returning *GetDatasetResponse
func (c *ClientWithResponses) GetDatasetWithResponse(ctx context.Context, dataproductId string, datasetId string, reqEditors ...RequestEditorFn) (*GetDatasetResponse, error) {
	rsp, err := c.GetDataset(ctx, dataproductId, datasetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDatasetResponse(rsp)
}

// UpdateDatasetWithBodyWithResponse request with arbitrary body returning *UpdateDatasetResponse
func (c *ClientWithResponses) UpdateDatasetWithBodyWithResponse(ctx context.Context, dataproductId string, datasetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDatasetResponse, error) {
	rsp, err := c.UpdateDatasetWithBody(ctx, dataproductId, datasetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatasetResponse(rsp)
}

func (c *ClientWithResponses) UpdateDatasetWithResponse(ctx context.Context, dataproductId string, datasetId string, body UpdateDatasetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDatasetResponse, error) {
	rsp, err := c.UpdateDataset(ctx, dataproductId, datasetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDatasetResponse(rsp)
}

// SearchWithResponse request returning *SearchResponse
func (c *ClientWithResponses) SearchWithResponse(ctx context.Context, params *SearchParams, reqEditors ...RequestEditorFn) (*SearchResponse, error) {
	rsp, err := c.Search(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchResponse(rsp)
}

// ParseGetDataproductsResponse parses an HTTP response from a GetDataproductsWithResponse call
func ParseGetDataproductsResponse(rsp *http.Response) (*GetDataproductsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDataproductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Dataproduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDataproductResponse parses an HTTP response from a CreateDataproductWithResponse call
func ParseCreateDataproductResponse(rsp *http.Response) (*CreateDataproductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateDataproductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Dataproduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteDataproductResponse parses an HTTP response from a DeleteDataproductWithResponse call
func ParseDeleteDataproductResponse(rsp *http.Response) (*DeleteDataproductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteDataproductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDataproductResponse parses an HTTP response from a GetDataproductWithResponse call
func ParseGetDataproductResponse(rsp *http.Response) (*GetDataproductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDataproductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Dataproduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDataproductResponse parses an HTTP response from a UpdateDataproductWithResponse call
func ParseUpdateDataproductResponse(rsp *http.Response) (*UpdateDataproductResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateDataproductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dataproduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDatasetsResponse parses an HTTP response from a GetDatasetsWithResponse call
func ParseGetDatasetsResponse(rsp *http.Response) (*GetDatasetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDatasetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Dataset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDatasetResponse parses an HTTP response from a CreateDatasetWithResponse call
func ParseCreateDatasetResponse(rsp *http.Response) (*CreateDatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Dataset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteDatasetResponse parses an HTTP response from a DeleteDatasetWithResponse call
func ParseDeleteDatasetResponse(rsp *http.Response) (*DeleteDatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDatasetResponse parses an HTTP response from a GetDatasetWithResponse call
func ParseGetDatasetResponse(rsp *http.Response) (*GetDatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dataset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDatasetResponse parses an HTTP response from a UpdateDatasetWithResponse call
func ParseUpdateDatasetResponse(rsp *http.Response) (*UpdateDatasetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateDatasetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dataset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchResponse parses an HTTP response from a SearchWithResponse call
func ParseSearchResponse(rsp *http.Response) (*SearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchResultEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dataproducts)
	GetDataproducts(ctx echo.Context) error

	// (POST /dataproducts)
	CreateDataproduct(ctx echo.Context) error

	// (DELETE /dataproducts/{dataproduct_id})
	DeleteDataproduct(ctx echo.Context, dataproductId string) error

	// (GET /dataproducts/{dataproduct_id})
	GetDataproduct(ctx echo.Context, dataproductId string) error

	// (PUT /dataproducts/{dataproduct_id})
	UpdateDataproduct(ctx echo.Context, dataproductId string) error

	// (GET /dataproducts/{dataproduct_id}/datasets)
	GetDatasets(ctx echo.Context, dataproductId string) error

	// (POST /dataproducts/{dataproduct_id}/datasets)
	CreateDataset(ctx echo.Context, dataproductId string) error

	// (DELETE /dataproducts/{dataproduct_id}/datasets/{dataset_id})
	DeleteDataset(ctx echo.Context, dataproductId string, datasetId string) error

	// (GET /dataproducts/{dataproduct_id}/datasets/{dataset_id})
	GetDataset(ctx echo.Context, dataproductId string, datasetId string) error

	// (PUT /dataproducts/{dataproduct_id}/datasets/{dataset_id})
	UpdateDataset(ctx echo.Context, dataproductId string, datasetId string) error

	// (GET /search)
	Search(ctx echo.Context, params SearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDataproducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDataproducts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDataproducts(ctx)
	return err
}

// CreateDataproduct converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDataproduct(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDataproduct(ctx)
	return err
}

// DeleteDataproduct converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDataproduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDataproduct(ctx, dataproductId)
	return err
}

// GetDataproduct converts echo context to params.
func (w *ServerInterfaceWrapper) GetDataproduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDataproduct(ctx, dataproductId)
	return err
}

// UpdateDataproduct converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDataproduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDataproduct(ctx, dataproductId)
	return err
}

// GetDatasets converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatasets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDatasets(ctx, dataproductId)
	return err
}

// CreateDataset converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDataset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDataset(ctx, dataproductId)
	return err
}

// DeleteDataset converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDataset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// ------------- Path parameter "dataset_id" -------------
	var datasetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, ctx.Param("dataset_id"), &datasetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataset_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDataset(ctx, dataproductId, datasetId)
	return err
}

// GetDataset converts echo context to params.
func (w *ServerInterfaceWrapper) GetDataset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// ------------- Path parameter "dataset_id" -------------
	var datasetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, ctx.Param("dataset_id"), &datasetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataset_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDataset(ctx, dataproductId, datasetId)
	return err
}

// UpdateDataset converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDataset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataproduct_id", runtime.ParamLocationPath, ctx.Param("dataproduct_id"), &dataproductId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err))
	}

	// ------------- Path parameter "dataset_id" -------------
	var datasetId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dataset_id", runtime.ParamLocationPath, ctx.Param("dataset_id"), &datasetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dataset_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDataset(ctx, dataproductId, datasetId)
	return err
}

// Search converts echo context to params.
func (w *ServerInterfaceWrapper) Search(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Search(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dataproducts", wrapper.GetDataproducts)
	router.POST(baseURL+"/dataproducts", wrapper.CreateDataproduct)
	router.DELETE(baseURL+"/dataproducts/:dataproduct_id", wrapper.DeleteDataproduct)
	router.GET(baseURL+"/dataproducts/:dataproduct_id", wrapper.GetDataproduct)
	router.PUT(baseURL+"/dataproducts/:dataproduct_id", wrapper.UpdateDataproduct)
	router.GET(baseURL+"/dataproducts/:dataproduct_id/datasets", wrapper.GetDatasets)
	router.POST(baseURL+"/dataproducts/:dataproduct_id/datasets", wrapper.CreateDataset)
	router.DELETE(baseURL+"/dataproducts/:dataproduct_id/datasets/:dataset_id", wrapper.DeleteDataset)
	router.GET(baseURL+"/dataproducts/:dataproduct_id/datasets/:dataset_id", wrapper.GetDataset)
	router.PUT(baseURL+"/dataproducts/:dataproduct_id/datasets/:dataset_id", wrapper.UpdateDataset)
	router.GET(baseURL+"/search", wrapper.Search)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYwW7jNhD9FWHaoxo52550a+tiEbRoinZ7WgQLRhrb3EgkQ47iGob+vSApWZJFWZsg",
	"6wSbm0wOZzhv3iPH3EMmSyUFCjKQ7sFkGyyZ+1wyYkrLvMrI/lRaKtTE0U1mGhlhbj9XUpeMIIWcEf5A",
	"vESIgXYKIQVDmos11LGdZAZ9EE5YmrFP7tyNVvqBPXyvcQUpfJd0O06a7SZL7/2DNa0Pa0DefsaMOifA",
	"tGY7tx00meaKuBTBoBN7ucPdVup8kMTEhrtYBTP0qZQ5X/HHICZYiUH/citQzyFy7YzqGDQqGXRjimod",
	"mHBL7iuu7V4/WiCarTQr2vjxgQPHGd4E8G8KNC76LV/fV6h345m8WzLau9LSev40RRl2W+B8bj0vB4JC",
	"uzqURd5JYir0E4k1WWzFeW/8VsoCmQhzvC+CdA8oqtJmeUD4JkCyP3F7Uudz6TxJEK+D2Q2pfcxQtRts",
	"vgHazhTxCeQLAGmN4xDbuo1ct/UdQkbIyjAgyMo7RqyQaxTzwDg/obj/INPZ5m80VUG/CQqVDf/LUCt6",
	"Fs3SkQK7GvUOkPYXy+7YGoPirHQRTvooQTvExcqLgZPlEPz811X0wX3H8IDauNrD5cXC6UyhYIpDCj9e",
	"LC7e2eIx2jgckt4W3cDac3nAIfiDG4pYUUQDa+dYM2tzlUMK75GWw3mNRklhPOTvFgvXSkhBKFwQplTB",
	"M+cg+Ww8W73sBwfMXCfQIjw6eupjMcD1735USRNI81d3w0UsEriNhrUbZuoNlwMLy0w09IvMd49K81R2",
	"R8d1XXsJDEC9fLZoR6HiIDp5ZKosQ2NWVVHsmi0NWJTsh/dm7YEukHAM+dKNR+wk3N5oCLdimpVIqA2k",
	"H0deO9PoaglWLpA60rfdTXp8ufePFtIVxj3QjhV5MyrCT1OZ5VFLuRPC6icfbTltokP7fFpjrw6HV6Tw",
	"KgD3vypns2zzRq8M5Zc5WxbnOls85q1YZk+UpP/3cv7GspbRSuqZwjfaanT3JoRl25TnvzZ98zN1ZfrZ",
	"b1dRDtOvf1M3YZ7tlj5oys8YfNzdHap5d2+/fM3jUDyDp2N5EF6oN3iPNIlsd1S9WVgX51DTl3cToSp1",
	"ncQbK9T5z9azsGHcpRj30jDZhfiHiIiLyHptnjZGNPFWZ/m7PH4Z+YLbv8lCu1WNHoZMdvTx70AH/tzD",
	"SZpYLwb1Q+vCPX7AhkiZNEmY4hd+9oLQUPJwCfVN/X8AAAD//xVxwDK+GAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

