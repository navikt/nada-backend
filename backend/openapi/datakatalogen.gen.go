// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for DatasetType.
const (
	DatasetTypeBigquery DatasetType = "bigquery"
)

// Defines values for SearchResultEntryType.
const (
	SearchResultEntryTypeDatapackage SearchResultEntryType = "datapackage"

	SearchResultEntryTypeDataproduct SearchResultEntryType = "dataproduct"

	SearchResultEntryTypeDataset SearchResultEntryType = "dataset"
)

// BigQuery defines model for BigQuery.
type BigQuery struct {
	Dataset   string `json:"dataset"`
	ProjectId string `json:"project_id"`
	Table     string `json:"table"`
}

// Dataproduct defines model for Dataproduct.
type Dataproduct struct {
	Created  time.Time `json:"created"`
	Datasets *[]struct {
		Id   *string      `json:"id,omitempty"`
		Type *DatasetType `json:"type,omitempty"`
	} `json:"datasets,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Id           string    `json:"id"`
	Keywords     *[]string `json:"keywords,omitempty"`
	LastModified time.Time `json:"last_modified"`
	Name         string    `json:"name"`
	Owner        Owner     `json:"owner"`
	Repo         *string   `json:"repo,omitempty"`
	Slug         string    `json:"slug"`
}

// Dataset defines model for Dataset.
type Dataset struct {
	Bigquery      BigQuery `json:"bigquery"`
	DataproductId string   `json:"dataproduct_id"`
	Description   *string  `json:"description,omitempty"`
	Id            string   `json:"id"`
	Name          string   `json:"name"`
	Pii           bool     `json:"pii"`
}

// DatasetType defines model for DatasetType.
type DatasetType string

// NewDataproduct defines model for NewDataproduct.
type NewDataproduct struct {
	Description *string   `json:"description,omitempty"`
	Keywords    *[]string `json:"keywords,omitempty"`
	Name        string    `json:"name"`
	Owner       Owner     `json:"owner"`
	Repo        *string   `json:"repo,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// NewDataset defines model for NewDataset.
type NewDataset struct {
	Bigquery    BigQuery `json:"bigquery"`
	Description *string  `json:"description,omitempty"`
	Name        string   `json:"name"`
	Pii         bool     `json:"pii"`
}

// Owner defines model for Owner.
type Owner struct {
	Team          string  `json:"team"`
	Teamkatalogen *string `json:"teamkatalogen,omitempty"`
}

// SearchResultEntry defines model for SearchResultEntry.
type SearchResultEntry struct {
	Excerpt *string                `json:"excerpt,omitempty"`
	Id      *string                `json:"id,omitempty"`
	Name    *string                `json:"name,omitempty"`
	Type    *SearchResultEntryType `json:"type,omitempty"`
	Url     *string                `json:"url,omitempty"`
}

// SearchResultEntryType defines model for SearchResultEntry.Type.
type SearchResultEntryType string

// CreateDataproductJSONBody defines parameters for CreateDataproduct.
type CreateDataproductJSONBody NewDataproduct

// UpdateDataproductJSONBody defines parameters for UpdateDataproduct.
type UpdateDataproductJSONBody NewDataproduct

// CreateDatasetJSONBody defines parameters for CreateDataset.
type CreateDatasetJSONBody NewDataset

// UpdateDatasetJSONBody defines parameters for UpdateDataset.
type UpdateDatasetJSONBody NewDataset

// SearchParams defines parameters for Search.
type SearchParams struct {
	Q *string `json:"q,omitempty"`
}

// CreateDataproductJSONRequestBody defines body for CreateDataproduct for application/json ContentType.
type CreateDataproductJSONRequestBody CreateDataproductJSONBody

// UpdateDataproductJSONRequestBody defines body for UpdateDataproduct for application/json ContentType.
type UpdateDataproductJSONRequestBody UpdateDataproductJSONBody

// CreateDatasetJSONRequestBody defines body for CreateDataset for application/json ContentType.
type CreateDatasetJSONRequestBody CreateDatasetJSONBody

// UpdateDatasetJSONRequestBody defines body for UpdateDataset for application/json ContentType.
type UpdateDatasetJSONRequestBody UpdateDatasetJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dataproducts)
	GetDataproducts(w http.ResponseWriter, r *http.Request)

	// (POST /dataproducts)
	CreateDataproduct(w http.ResponseWriter, r *http.Request)

	// (DELETE /dataproducts/{dataproduct_id})
	DeleteDataproduct(w http.ResponseWriter, r *http.Request, dataproductId string)

	// (GET /dataproducts/{dataproduct_id})
	GetDataproduct(w http.ResponseWriter, r *http.Request, dataproductId string)

	// (PUT /dataproducts/{dataproduct_id})
	UpdateDataproduct(w http.ResponseWriter, r *http.Request, dataproductId string)

	// (GET /dataproducts/{dataproduct_id}/datasets)
	GetDatasetsForDataproduct(w http.ResponseWriter, r *http.Request, dataproductId string)

	// (POST /dataproducts/{dataproduct_id}/datasets)
	CreateDataset(w http.ResponseWriter, r *http.Request, dataproductId string)

	// (DELETE /dataproducts/{dataproduct_id}/datasets/{dataset_id})
	DeleteDataset(w http.ResponseWriter, r *http.Request, dataproductId string, datasetId string)

	// (GET /dataproducts/{dataproduct_id}/datasets/{dataset_id})
	GetDataset(w http.ResponseWriter, r *http.Request, dataproductId string, datasetId string)

	// (PUT /dataproducts/{dataproduct_id}/datasets/{dataset_id})
	UpdateDataset(w http.ResponseWriter, r *http.Request, dataproductId string, datasetId string)

	// (GET /search)
	Search(w http.ResponseWriter, r *http.Request, params SearchParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetDataproducts operation middleware
func (siw *ServerInterfaceWrapper) GetDataproducts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDataproducts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateDataproduct operation middleware
func (siw *ServerInterfaceWrapper) CreateDataproduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDataproduct(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteDataproduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteDataproduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameter("simple", false, "dataproduct_id", chi.URLParam(r, "dataproduct_id"), &dataproductId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDataproduct(w, r, dataproductId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetDataproduct operation middleware
func (siw *ServerInterfaceWrapper) GetDataproduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameter("simple", false, "dataproduct_id", chi.URLParam(r, "dataproduct_id"), &dataproductId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDataproduct(w, r, dataproductId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateDataproduct operation middleware
func (siw *ServerInterfaceWrapper) UpdateDataproduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameter("simple", false, "dataproduct_id", chi.URLParam(r, "dataproduct_id"), &dataproductId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDataproduct(w, r, dataproductId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetDatasetsForDataproduct operation middleware
func (siw *ServerInterfaceWrapper) GetDatasetsForDataproduct(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameter("simple", false, "dataproduct_id", chi.URLParam(r, "dataproduct_id"), &dataproductId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDatasetsForDataproduct(w, r, dataproductId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateDataset operation middleware
func (siw *ServerInterfaceWrapper) CreateDataset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameter("simple", false, "dataproduct_id", chi.URLParam(r, "dataproduct_id"), &dataproductId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDataset(w, r, dataproductId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteDataset operation middleware
func (siw *ServerInterfaceWrapper) DeleteDataset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameter("simple", false, "dataproduct_id", chi.URLParam(r, "dataproduct_id"), &dataproductId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "dataset_id" -------------
	var datasetId string

	err = runtime.BindStyledParameter("simple", false, "dataset_id", chi.URLParam(r, "dataset_id"), &datasetId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataset_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDataset(w, r, dataproductId, datasetId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetDataset operation middleware
func (siw *ServerInterfaceWrapper) GetDataset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameter("simple", false, "dataproduct_id", chi.URLParam(r, "dataproduct_id"), &dataproductId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "dataset_id" -------------
	var datasetId string

	err = runtime.BindStyledParameter("simple", false, "dataset_id", chi.URLParam(r, "dataset_id"), &datasetId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataset_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDataset(w, r, dataproductId, datasetId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateDataset operation middleware
func (siw *ServerInterfaceWrapper) UpdateDataset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "dataproduct_id" -------------
	var dataproductId string

	err = runtime.BindStyledParameter("simple", false, "dataproduct_id", chi.URLParam(r, "dataproduct_id"), &dataproductId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataproduct_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "dataset_id" -------------
	var datasetId string

	err = runtime.BindStyledParameter("simple", false, "dataset_id", chi.URLParam(r, "dataset_id"), &datasetId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter dataset_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDataset(w, r, dataproductId, datasetId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Search operation middleware
func (siw *ServerInterfaceWrapper) Search(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchParams

	// ------------- Optional query parameter "q" -------------
	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", r.URL.Query(), &params.Q)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter q: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Search(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dataproducts", wrapper.GetDataproducts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dataproducts", wrapper.CreateDataproduct)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dataproducts/{dataproduct_id}", wrapper.DeleteDataproduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dataproducts/{dataproduct_id}", wrapper.GetDataproduct)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/dataproducts/{dataproduct_id}", wrapper.UpdateDataproduct)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dataproducts/{dataproduct_id}/datasets", wrapper.GetDatasetsForDataproduct)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dataproducts/{dataproduct_id}/datasets", wrapper.CreateDataset)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dataproducts/{dataproduct_id}/datasets/{dataset_id}", wrapper.DeleteDataset)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dataproducts/{dataproduct_id}/datasets/{dataset_id}", wrapper.GetDataset)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/dataproducts/{dataproduct_id}/datasets/{dataset_id}", wrapper.UpdateDataset)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/search", wrapper.Search)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTW/jNhD9KwLbo2p5tz3p1q3bRdCi6Ud6WgQLWhrb3EgkQ47WNQz994KkZJkWJW1S",
	"1zGam0wOZzhv3uPQ3JNMlFJw4KhJuic620BJ7ec7tv69ArUz31IJCQoZ2JmcItWA5hN3EkhKNCrG16SO",
	"jeUnyPAjy4PTSJcFBGbqmCh4rJiCnKQfjr3Eh3Dt6vu4XS2Wxsr4XVCkUom8yrC/30wBRbAbWglVUiSp",
	"cQrfICuBxP1dNhHtYoZQ6r7PofzswJ58rWBFUvJV0sGbNNgmC+f9zpjWdSCZZoAqRXd2O6AzxSQywYNB",
	"B/byALutULmfxcCOu2AF1fixFDlbsadAxmkJQf9iy0FNQXJrjSwJpAi60UW1nuaN5YvdSrOijR8fSHCa",
	"4RCbGoL7VV+y9WOribF8DtppyNRQc0gVzyzwIOaSsaPxpRAFUD4KllnR22rc5TuC0l1DeeBVadwG1nQ7",
	"+xW2o1KdQuJ5nL4OcjZQu5ghQBtwzse8CTD/JX886owy5baF2c8JgZbh+gEtHyjSQqyBTwNr/YTi/glU",
	"ZZs/QFcF/sgx1Mvg7wyUxLPIDk+U0DWuI2G1v2j2QNcQFEmlinDSJwmaIcZXjpMMTWMl3/92E93Z75h8",
	"BqVt7cmb2dzSXQKnkpGUfDubz96a4lHcWBySoy3agbVjocch8gvTGNGiiDxr61hRY3OTk5S8B1z48wq0",
	"FFw7yN/O57YrC47AbRAqZcEy6yD5pB1bHaE9nU811Rbh3glQn4qB3P7sRqXQgTR/sL0iohGHbeTXzs/U",
	"GS48C8NM0PhO5LsnpTmW3cmxWddOAh6ob84W7SRUHEQnj3SVZaD1qiqKXbMlj0XJ3u8ntQO6AIQ+5As7",
	"HtFRuJ2RD7ekipaAoDRJP/S8dqbRzYIYuZDUkr5tfWm/6XVHC6oK4iPQThV53yvCd0OZ5VFLuRFhHScf",
	"bRluosNNdFxjV4fDFSm8CsD9l8zpJNuc0ZWh/DJny/xSZ4vDvBXL5ImSHP9Tm+5YxjJaCTVR+EZbxvon",
	"oV6hzMyl5fxN1F2Fhhqom/3/6sti+t/37SbM2Xr2QWFuRsPTOnmo5l0Xf/max6F4GsZjORBe6KbwHnAQ",
	"2e7gerWwzi+hpi+/W4Sq1N0rXlmhLn+2XoQN/TuLtu8Og3cS9ywRMR4Zr81DR48mzuoif5777yRf0P2b",
	"LJRd1ejBZ7Klj3sVOvDnkYzSxHjRoD63LuxTCNkgSp0mCZVs5mZnCBrNb1Lf1/8EAAD//46fxI/FGAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

